/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.AddANewCardForCurrentUserRequest
import io.swagger.client.model.AddANewCardForCurrentUserResponse
import io.swagger.client.model.BaseResponse
import io.swagger.client.model.CompleteRequest
import io.swagger.client.model.CompleteResponse
import io.swagger.client.model.CreateAnonymousPageRequest
import io.swagger.client.model.CreateAnonymousPageResponse
import io.swagger.client.model.CreateDtekPageRequest
import io.swagger.client.model.CreateDtekPageResponse
import io.swagger.client.model.CreateNewWebhookRequest
import io.swagger.client.model.CreateNewWebhookResponse
import io.swagger.client.model.CreateRequest
import io.swagger.client.model.CreateResponse
import io.swagger.client.model.CreateUserPageRequest
import io.swagger.client.model.CreateUserPageResponse
import io.swagger.client.model.DeleteCardResponse
import io.swagger.client.model.DeleteCurrentUserPageResponse
import io.swagger.client.model.DeleteWebhookResponse
import io.swagger.client.model.EditCardDataRequest
import io.swagger.client.model.EditCardDataResponse
import io.swagger.client.model.EditCurrentUserPageRequest
import io.swagger.client.model.EditCurrentUserPageResponse
import io.swagger.client.model.FacebookRequest
import io.swagger.client.model.FacebookResponse
import io.swagger.client.model.GetAllPagesResponse
import io.swagger.client.model.GetCurrentUserPageResponse
import io.swagger.client.model.GetCurrentUserPagesResponse
import io.swagger.client.model.GetCurrentUserResponse
import io.swagger.client.model.GetCurrentUserWebhooksResponse
import io.swagger.client.model.GetDefaultPageForUserResponse
import io.swagger.client.model.GetPaymentResponse
import io.swagger.client.model.GetUsersCountResponse
import io.swagger.client.model.Google+Request
import io.swagger.client.model.Google+Response
import io.swagger.client.model.ListOrSearchPaymentsResponse
import io.swagger.client.model.ListPagesThatIsUsingCardResponse
import io.swagger.client.model.ModifyWebhookRequest
import io.swagger.client.model.ModifyWebhookResponse
import io.swagger.client.model.ResendReceiptResponse
import io.swagger.client.model.ResendVerifyEmailTokenRequest
import io.swagger.client.model.ResendVerifyEmailTokenResponse
import io.swagger.client.model.ResendVerifyPhoneTokenRequest
import io.swagger.client.model.ResendVerifyPhoneTokenResponse
import io.swagger.client.model.ResetPasswordRequest
import io.swagger.client.model.ResetPasswordResponse
import io.swagger.client.model.SendInvoiceResponse
import io.swagger.client.model.SendMessageToSupportRequest
import io.swagger.client.model.SendMessageToSupportResponse
import io.swagger.client.model.SendPasswordResetTokenRequest
import io.swagger.client.model.SendPasswordResetTokenResponse
import io.swagger.client.model.SignUp via email and~1or password request
import io.swagger.client.model.SignUp via email and~1or password response
import io.swagger.client.model.UnlinkSocialProfileResponse
import io.swagger.client.model.UpdateCurrentUserRequest
import io.swagger.client.model.UpdateCurrentUserResponse
import io.swagger.client.model.VerifyEmailRequest
import io.swagger.client.model.VerifyEmailResponse
import io.swagger.client.model.VerifyPhoneRequest
import io.swagger.client.model.VerifyPhoneResponse
import io.swagger.client.model.VkontakteRequest
import io.swagger.client.model.VkontakteResponse
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object DefaultApi {

  /**
   * 
   * Expected answers:
   *   code 200 : AddANewCardForCurrentUserResponse 
   *   code 401 :  
   *   code 422 :  
   * 
   * @param body 
   */
  def add a new Card for current User(body: AddANewCardForCurrentUserRequest): ApiRequest[AddANewCardForCurrentUserResponse] =
    ApiRequest[AddANewCardForCurrentUserResponse](ApiMethods.POST, "https://api.mbill.co/", "/api/v1/user/cards", "application/json")
      .withBody(body)
      .withSuccessResponse[AddANewCardForCurrentUserResponse](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](422)
        /**
   * Getting an authorization token by mail or phone and password.
   * 
   * Expected answers:
   *   code 200 : BaseResponse 
   *   code 401 :  
   */
  def base(): ApiRequest[BaseResponse] =
    ApiRequest[BaseResponse](ApiMethods.GET, "https://api.mbill.co/", "/oauth/base", "application/json")
      .withSuccessResponse[BaseResponse](200)
      .withErrorResponse[Unit](401)
        /**
   * Complete payment via Lookup code
   * 
   * Expected answers:
   *   code 200 : CompleteResponse 
   * 
   * @param id Payment ID, MongoID
   * @param body 
   */
  def complete(id: String, body: CompleteRequest): ApiRequest[CompleteResponse] =
    ApiRequest[CompleteResponse](ApiMethods.POST, "https://api.mbill.co/", "/api/v1/payments/{id}/complete", "application/json")
      .withBody(body)
      .withPathParam("id", id)
      .withSuccessResponse[CompleteResponse](200)
        /**
   * Create payment by Page.id. If an optional &#x60;email&#x60; parameter is passed, the sender will receive a notification about the transfer to the Email #### 3-D Secure card verification When card is required *3-D Secure* verification, response will contain field (object) &#x60;auth&#x60; with the following fields: + &#x60;acs_url&#x60; - redirect url for *3-D Secure* verification + &#x60;pa_req&#x60; - payment authentication request + &#x60;terminal_url&#x60; - redirect URL after the customer has authenticated themselves + &#x60;md&#x60; - unique payment ID
   * 
   * Expected answers:
   *   code 200 : CreateResponse 
   * 
   * @param id Payment ID, MongoID
   * @param body 
   */
  def create(id: String, body: CreateRequest): ApiRequest[CreateResponse] =
    ApiRequest[CreateResponse](ApiMethods.POST, "https://api.mbill.co/", "/api/v1/pages/{id}/pay", "application/json")
      .withBody(body)
      .withPathParam("id", id)
      .withSuccessResponse[CreateResponse](200)
        /**
   * Anonymous pages can be created by unauthorized users, they will be short-lived and impossible to edit.
   * 
   * Expected answers:
   *   code 200 : CreateAnonymousPageResponse 
   * 
   * @param body 
   */
  def create Anonymous Page(body: CreateAnonymousPageRequest): ApiRequest[CreateAnonymousPageResponse] =
    ApiRequest[CreateAnonymousPageResponse](ApiMethods.POST, "https://api.mbill.co/", "/api/v1/pages", "application/json")
      .withBody(body)
      .withSuccessResponse[CreateAnonymousPageResponse](200)
        /**
   * Anonymous pages can be created by unauthorized users, they will be short-lived and impossible to edit. &#x60;api-key&#x60; should be used to authorize consumer back-end.
   * 
   * Expected answers:
   *   code 200 : CreateDtekPageResponse 
   * 
   * @param body 
   */
  def create DTEK Page(body: CreateDtekPageRequest): ApiRequest[CreateDtekPageResponse] =
    ApiRequest[CreateDtekPageResponse](ApiMethods.POST, "https://api.mbill.co/", "/api/v1/dtek/pages", "application/json")
      .withBody(body)
      .withSuccessResponse[CreateDtekPageResponse](200)
        /**
   * 
   * Expected answers:
   *   code 200 : CreateUserPageResponse 
   *   code 401 :  
   * 
   * @param body 
   */
  def create User Page(body: CreateUserPageRequest): ApiRequest[CreateUserPageResponse] =
    ApiRequest[CreateUserPageResponse](ApiMethods.POST, "https://api.mbill.co/", "/api/v1/user/pages", "application/json")
      .withBody(body)
      .withSuccessResponse[CreateUserPageResponse](200)
      .withErrorResponse[Unit](401)
        /**
   * Webhook will be requested by POST with any change in the status of the payment. If there are several hooks, all points will be requested. The maximum number of webhooks is 5. The fields which will be transfered: The client should self-shuffle in the same sequence of fields and make sure that the hashes equals. This ensures that the data has not been changed during the transfer. TODO: replace this with JSON or table (preferred). + &#x60;hash&#x60;: check SHA1 hash from fields in the following sequence: &#x60;page_id&#x60;, &#x60;payment_id&#x60;, &#x60;user_id&#x60;, &#x60;amount&#x60;, &#x60;fee&#x60;, &#x60;card_sender&#x60;, &#x60;card_recipient&#x60;, &#x60;email_recipient&#x60;, &#x60;external_id&#x60;, &#x60;id&#x60; + &#x60;id&#x60;: is the id of the webhook. Returned when creating or modifying a Webhook + &#x60;status&#x60;: the payment status. Possible: processed | Failed + &#x60;page_id&#x60;: string, page identifier + &#x60;payment_id&#x60;: a string, a payment ID + &#x60;amount&#x60;: amount of payment + &#x60;fee&#x60;: the number, amount of commission + &#x60;description&#x60;: purpose of payment + &#x60;card_recipient&#x60;: destination card in the format &#x60;000000 ****** 0000&#x60; + &#x60;card_sender&#x60;: the sender&#39;s card in the format &#x60;000000 ****** 0000&#x60; + &#x60;email_recipient&#x60;: recipient&#39;s email + &#x60;created_at&#x60;: payment creation date + &#x60;email_sender&#x60;: optional, email from the sender + &#x60;external_id&#x60;: optional, the identifier that was sent by the client when creating the payment
   * 
   * Expected answers:
   *   code 200 : CreateNewWebhookResponse 
   *   code 401 :  
   *   code 422 :  
   * 
   * @param body 
   */
  def create new Webhook(body: CreateNewWebhookRequest): ApiRequest[CreateNewWebhookResponse] =
    ApiRequest[CreateNewWebhookResponse](ApiMethods.POST, "https://api.mbill.co/", "/api/v1/user/webhooks", "application/json")
      .withBody(body)
      .withSuccessResponse[CreateNewWebhookResponse](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](422)
        /**
   * 
   * Expected answers:
   *   code 200 : DeleteCardResponse 
   *   code 401 :  
   * 
   * @param id Card ID
   */
  def delete Card(id: String): ApiRequest[DeleteCardResponse] =
    ApiRequest[DeleteCardResponse](ApiMethods.DELETE, "https://api.mbill.co/", "/api/v1/user/cards/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[DeleteCardResponse](200)
      .withErrorResponse[Unit](401)
        /**
   * Webhook will be requested by POST with any change in the status of the payment. If there are several hooks, all points will be requested. The maximum number of webhooks is 5. The fields which will be transfered: The client should self-shuffle in the same sequence of fields and make sure that the hashes equals. This ensures that the data has not been changed during the transfer. TODO: replace this with JSON or table (preferred). + &#x60;hash&#x60;: check SHA1 hash from fields in the following sequence: &#x60;page_id&#x60;, &#x60;payment_id&#x60;, &#x60;user_id&#x60;, &#x60;amount&#x60;, &#x60;fee&#x60;, &#x60;card_sender&#x60;, &#x60;card_recipient&#x60;, &#x60;email_recipient&#x60;, &#x60;external_id&#x60;, &#x60;id&#x60; + &#x60;id&#x60;: is the id of the webhook. Returned when creating or modifying a Webhook + &#x60;status&#x60;: the payment status. Possible: processed | Failed + &#x60;page_id&#x60;: string, page identifier + &#x60;payment_id&#x60;: a string, a payment ID + &#x60;amount&#x60;: amount of payment + &#x60;fee&#x60;: the number, amount of commission + &#x60;description&#x60;: purpose of payment + &#x60;card_recipient&#x60;: destination card in the format &#x60;000000 ****** 0000&#x60; + &#x60;card_sender&#x60;: the sender&#39;s card in the format &#x60;000000 ****** 0000&#x60; + &#x60;email_recipient&#x60;: recipient&#39;s email + &#x60;created_at&#x60;: payment creation date + &#x60;email_sender&#x60;: optional, email from the sender + &#x60;external_id&#x60;: optional, the identifier that was sent by the client when creating the payment
   * 
   * Expected answers:
   *   code 200 : DeleteWebhookResponse 
   *   code 401 :  
   * 
   * @param id Webhook ID
   */
  def delete Webhook(id: String): ApiRequest[DeleteWebhookResponse] =
    ApiRequest[DeleteWebhookResponse](ApiMethods.DELETE, "https://api.mbill.co/", "/api/v1/user/webhooks/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[DeleteWebhookResponse](200)
      .withErrorResponse[Unit](401)
        /**
   * 
   * Expected answers:
   *   code 200 : DeleteCurrentUserPageResponse 
   *   code 401 :  
   * 
   * @param id Page ID, MongoID
   */
  def delete current User Page(id: String): ApiRequest[DeleteCurrentUserPageResponse] =
    ApiRequest[DeleteCurrentUserPageResponse](ApiMethods.DELETE, "https://api.mbill.co/", "/api/v1/user/pages/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[DeleteCurrentUserPageResponse](200)
      .withErrorResponse[Unit](401)
        /**
   * 
   * Expected answers:
   *   code 200 : EditCardDataResponse 
   *   code 401 :  
   *   code 422 :  
   * 
   * @param id Card ID
   * @param body 
   */
  def edit Card Data(id: String, body: EditCardDataRequest): ApiRequest[EditCardDataResponse] =
    ApiRequest[EditCardDataResponse](ApiMethods.PUT, "https://api.mbill.co/", "/api/v1/user/cards/{id}", "application/json")
      .withBody(body)
      .withPathParam("id", id)
      .withSuccessResponse[EditCardDataResponse](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](422)
        /**
   * 
   * Expected answers:
   *   code 200 : EditCurrentUserPageResponse 
   *   code 401 :  
   * 
   * @param id Page ID, MongoID
   * @param body 
   */
  def edit current User Page(id: String, body: EditCurrentUserPageRequest): ApiRequest[EditCurrentUserPageResponse] =
    ApiRequest[EditCurrentUserPageResponse](ApiMethods.PUT, "https://api.mbill.co/", "/api/v1/user/pages/{id}", "application/json")
      .withBody(body)
      .withPathParam("id", id)
      .withSuccessResponse[EditCurrentUserPageResponse](200)
      .withErrorResponse[Unit](401)
        /**
   * This authorization method will Sign In user by Facebook &#x60;access_token&#x60; or create account if used was not found among Mbill users.
   * 
   * Expected answers:
   *   code 200 : FacebookResponse 
   *   code 400 :  
   *   code 422 :  
   * 
   * @param body 
   */
  def facebook(body: FacebookRequest): ApiRequest[FacebookResponse] =
    ApiRequest[FacebookResponse](ApiMethods.POST, "https://api.mbill.co/", "/oauth/facebook", "application/json")
      .withBody(body)
      .withSuccessResponse[FacebookResponse](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](422)
        /**
   * Used to get Payment status.
   * 
   * Expected answers:
   *   code 200 : GetPaymentResponse 
   * 
   * @param id Payment ID, MongoID
   */
  def get Payment(id: String): ApiRequest[GetPaymentResponse] =
    ApiRequest[GetPaymentResponse](ApiMethods.GET, "https://api.mbill.co/", "/api/v1/pages/{id}/status", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[GetPaymentResponse](200)
        /**
   * Returns count of unique and active merchants.
   * 
   * Expected answers:
   *   code 200 : GetUsersCountResponse 
   */
  def get Users count(): ApiRequest[GetUsersCountResponse] =
    ApiRequest[GetUsersCountResponse](ApiMethods.GET, "https://api.mbill.co/", "/api/v1/merchants/count", "application/json")
      .withSuccessResponse[GetUsersCountResponse](200)
        /**
   * 
   * Expected answers:
   *   code 200 : GetAllPagesResponse 
   */
  def get all Pages(): ApiRequest[GetAllPagesResponse] =
    ApiRequest[GetAllPagesResponse](ApiMethods.GET, "https://api.mbill.co/", "/api/v1/pages", "application/json")
      .withSuccessResponse[GetAllPagesResponse](200)
        /**
   * Getting current (logged in) user data.
   * 
   * Expected answers:
   *   code 200 : GetCurrentUserResponse 
   *   code 401 :  
   */
  def get current User(): ApiRequest[GetCurrentUserResponse] =
    ApiRequest[GetCurrentUserResponse](ApiMethods.GET, "https://api.mbill.co/", "/api/v1/user", "application/json")
      .withSuccessResponse[GetCurrentUserResponse](200)
      .withErrorResponse[Unit](401)
        /**
   * 
   * Expected answers:
   *   code 200 : GetCurrentUserPageResponse 
   * 
   * @param id Page ID, MongoID
   */
  def get current User Page(id: String): ApiRequest[GetCurrentUserPageResponse] =
    ApiRequest[GetCurrentUserPageResponse](ApiMethods.GET, "https://api.mbill.co/", "/api/v1/user/pages/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[GetCurrentUserPageResponse](200)
        /**
   * Getting user pages with filters
   * 
   * Expected answers:
   *   code 200 : GetCurrentUserPagesResponse 
   *   code 401 :  
   * 
   * @param startingAfter Paginate element
   * @param limit Limit pages into response (if -1 you&#39;ll get all pages)
   * @param isActive Filter by active pages
   * @param title Filter by page title, looking for entry in the title
   */
  def get current User Pages(startingAfter: String, limit: Double, isActive: Boolean, title: String): ApiRequest[GetCurrentUserPagesResponse] =
    ApiRequest[GetCurrentUserPagesResponse](ApiMethods.GET, "https://api.mbill.co/", "/api/v1/user/pages/", "application/json")
      .withQueryParam("starting_after", startingAfter)
      .withQueryParam("limit", limit)
      .withQueryParam("is_active", isActive)
      .withQueryParam("title", title)
      .withSuccessResponse[GetCurrentUserPagesResponse](200)
      .withErrorResponse[Unit](401)
        /**
   * 
   * Expected answers:
   *   code 200 : GetCurrentUserPagesResponse 
   *   code 401 :  
   */
  def get current User Pages1(): ApiRequest[GetCurrentUserPagesResponse] =
    ApiRequest[GetCurrentUserPagesResponse](ApiMethods.GET, "https://api.mbill.co/", "/api/v1/user/pages", "application/json")
      .withSuccessResponse[GetCurrentUserPagesResponse](200)
      .withErrorResponse[Unit](401)
        /**
   * Webhook will be requested by POST with any change in the status of the payment. If there are several hooks, all points will be requested. The maximum number of webhooks is 5. The fields which will be transfered: The client should self-shuffle in the same sequence of fields and make sure that the hashes equals. This ensures that the data has not been changed during the transfer. TODO: replace this with JSON or table (preferred). + &#x60;hash&#x60;: check SHA1 hash from fields in the following sequence: &#x60;page_id&#x60;, &#x60;payment_id&#x60;, &#x60;user_id&#x60;, &#x60;amount&#x60;, &#x60;fee&#x60;, &#x60;card_sender&#x60;, &#x60;card_recipient&#x60;, &#x60;email_recipient&#x60;, &#x60;external_id&#x60;, &#x60;id&#x60; + &#x60;id&#x60;: is the id of the webhook. Returned when creating or modifying a Webhook + &#x60;status&#x60;: the payment status. Possible: processed | Failed + &#x60;page_id&#x60;: string, page identifier + &#x60;payment_id&#x60;: a string, a payment ID + &#x60;amount&#x60;: amount of payment + &#x60;fee&#x60;: the number, amount of commission + &#x60;description&#x60;: purpose of payment + &#x60;card_recipient&#x60;: destination card in the format &#x60;000000 ****** 0000&#x60; + &#x60;card_sender&#x60;: the sender&#39;s card in the format &#x60;000000 ****** 0000&#x60; + &#x60;email_recipient&#x60;: recipient&#39;s email + &#x60;created_at&#x60;: payment creation date + &#x60;email_sender&#x60;: optional, email from the sender + &#x60;external_id&#x60;: optional, the identifier that was sent by the client when creating the payment
   * 
   * Expected answers:
   *   code 200 : GetCurrentUserWebhooksResponse 
   *   code 401 :  
   */
  def get current User Webhooks(): ApiRequest[GetCurrentUserWebhooksResponse] =
    ApiRequest[GetCurrentUserWebhooksResponse](ApiMethods.GET, "https://api.mbill.co/", "/api/v1/user/webhooks", "application/json")
      .withSuccessResponse[GetCurrentUserWebhooksResponse](200)
      .withErrorResponse[Unit](401)
        /**
   * 
   * Expected answers:
   *   code 200 : GetDefaultPageForUserResponse 
   * 
   * @param nickname User nickname
   */
  def get default Page for User(nickname: String): ApiRequest[GetDefaultPageForUserResponse] =
    ApiRequest[GetDefaultPageForUserResponse](ApiMethods.GET, "https://api.mbill.co/", "/api/v1/users/{nickname}/page", "application/json")
      .withPathParam("nickname", nickname)
      .withSuccessResponse[GetDefaultPageForUserResponse](200)
        /**
   * This authorization method will Sign In user by G+ &#x60;access_token&#x60; or create account if used was not found among Mbill users.
   * 
   * Expected answers:
   *   code 200 : Google+Response 
   *   code 400 :  
   *   code 422 :  
   * 
   * @param body 
   */
  def google+(body: Google+Request): ApiRequest[Google+Response] =
    ApiRequest[Google+Response](ApiMethods.POST, "https://api.mbill.co/", "/oauth/google", "application/json")
      .withBody(body)
      .withSuccessResponse[Google+Response](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](422)
        /**
   * 
   * Expected answers:
   *   code 200 : ListOrSearchPaymentsResponse 
   *   code 401 :  
   * 
   * @param senderCardNumberFirst First 6 digits of Sender card number
   * @param senderCardNumberLast Last 2 digits of Sender card number
   * @param recipientCardNumberFirst First 6 digits of Recipient card number
   * @param recipientCardNumberLast Last 2 digits of Recipient card number
   * @param externalId client-id (string) - Client ID for payment
   * @param transactionId Page ID, MongoID
   * @param pageId Page ID, MongoID
   * @param pageDescription 
   * @param amountFrom 
   * @param amountTo 
   * @param dateFrom 10-12 (string)
   * @param dateTo 01-01 (string)
   * @param limit amount of payment per page (default 10)
   * @param startingAfter for pagination, show payments after specified ID, MongoId
   * @param &#x60;type&#x60; response type
   */
  def list or Search Payments(senderCardNumberFirst: Double, senderCardNumberLast: String, recipientCardNumberFirst: Double, recipientCardNumberLast: String, externalId: String, transactionId: String, pageId: String, pageDescription: String, amountFrom: Double, amountTo: Double, dateFrom: String, dateTo: String, limit: Double, startingAfter: String, &#x60;type&#x60;: Option[String] = None): ApiRequest[ListOrSearchPaymentsResponse] =
    ApiRequest[ListOrSearchPaymentsResponse](ApiMethods.GET, "https://api.mbill.co/", "/api/v1/payments", "application/json")
      .withQueryParam("sender_card_number_first", senderCardNumberFirst)
      .withQueryParam("sender_card_number_last", senderCardNumberLast)
      .withQueryParam("recipient_card_number_first", recipientCardNumberFirst)
      .withQueryParam("recipient_card_number_last", recipientCardNumberLast)
      .withQueryParam("external_id", externalId)
      .withQueryParam("transaction_id", transactionId)
      .withQueryParam("page_id", pageId)
      .withQueryParam("page_description", pageDescription)
      .withQueryParam("amount_from", amountFrom)
      .withQueryParam("amount_to", amountTo)
      .withQueryParam("date_from", dateFrom)
      .withQueryParam("date_to", dateTo)
      .withQueryParam("limit", limit)
      .withQueryParam("starting_after", startingAfter)
      .withQueryParam("type", &#x60;type&#x60;)
      .withSuccessResponse[ListOrSearchPaymentsResponse](200)
      .withErrorResponse[Unit](401)
        /**
   * 
   * Expected answers:
   *   code 200 : ListPagesThatIsUsingCardResponse 
   *   code 401 :  
   * 
   * @param id Card ID
   */
  def list pages that is using Card(id: String): ApiRequest[ListPagesThatIsUsingCardResponse] =
    ApiRequest[ListPagesThatIsUsingCardResponse](ApiMethods.GET, "https://api.mbill.co/", "/api/v1/user/cards/{id}/pages", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[ListPagesThatIsUsingCardResponse](200)
      .withErrorResponse[Unit](401)
        /**
   * Webhook will be requested by POST with any change in the status of the payment. If there are several hooks, all points will be requested. The maximum number of webhooks is 5. The fields which will be transfered: The client should self-shuffle in the same sequence of fields and make sure that the hashes equals. This ensures that the data has not been changed during the transfer. TODO: replace this with JSON or table (preferred). + &#x60;hash&#x60;: check SHA1 hash from fields in the following sequence: &#x60;page_id&#x60;, &#x60;payment_id&#x60;, &#x60;user_id&#x60;, &#x60;amount&#x60;, &#x60;fee&#x60;, &#x60;card_sender&#x60;, &#x60;card_recipient&#x60;, &#x60;email_recipient&#x60;, &#x60;external_id&#x60;, &#x60;id&#x60; + &#x60;id&#x60;: is the id of the webhook. Returned when creating or modifying a Webhook + &#x60;status&#x60;: the payment status. Possible: processed | Failed + &#x60;page_id&#x60;: string, page identifier + &#x60;payment_id&#x60;: a string, a payment ID + &#x60;amount&#x60;: amount of payment + &#x60;fee&#x60;: the number, amount of commission + &#x60;description&#x60;: purpose of payment + &#x60;card_recipient&#x60;: destination card in the format &#x60;000000 ****** 0000&#x60; + &#x60;card_sender&#x60;: the sender&#39;s card in the format &#x60;000000 ****** 0000&#x60; + &#x60;email_recipient&#x60;: recipient&#39;s email + &#x60;created_at&#x60;: payment creation date + &#x60;email_sender&#x60;: optional, email from the sender + &#x60;external_id&#x60;: optional, the identifier that was sent by the client when creating the payment
   * 
   * Expected answers:
   *   code 200 : ModifyWebhookResponse 
   *   code 401 :  
   *   code 422 :  
   * 
   * @param id Webhook ID
   * @param body 
   */
  def modify Webhook(id: String, body: ModifyWebhookRequest): ApiRequest[ModifyWebhookResponse] =
    ApiRequest[ModifyWebhookResponse](ApiMethods.PUT, "https://api.mbill.co/", "/api/v1/user/webhooks/{id}", "application/json")
      .withBody(body)
      .withPathParam("id", id)
      .withSuccessResponse[ModifyWebhookResponse](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](422)
        /**
   * Resend Payment Receipt to sender Email.
   * 
   * Expected answers:
   *   code 200 : ResendReceiptResponse 
   * 
   * @param id Payment ID, MongoID
   */
  def resend Receipt(id: String): ApiRequest[ResendReceiptResponse] =
    ApiRequest[ResendReceiptResponse](ApiMethods.GET, "https://api.mbill.co/", "/api/v1/pages/{id}/email/resend", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[ResendReceiptResponse](200)
        /**
   * Re-send the link for confirmation email. The user will receive a letter with a code for confirmation of e-mail
   * 
   * Expected answers:
   *   code 200 : ResendVerifyEmailTokenResponse 
   *   code 404 :  
   * 
   * @param body 
   */
  def resend verify email token(body: ResendVerifyEmailTokenRequest): ApiRequest[ResendVerifyEmailTokenResponse] =
    ApiRequest[ResendVerifyEmailTokenResponse](ApiMethods.POST, "https://api.mbill.co/", "/api/v1/user/verify/email/resend", "application/json")
      .withBody(body)
      .withSuccessResponse[ResendVerifyEmailTokenResponse](200)
      .withErrorResponse[Unit](404)
        /**
   * Resending the code to sms for confirmation of the phone
   * 
   * Expected answers:
   *   code 200 : ResendVerifyPhoneTokenResponse 
   *   code 404 :  
   * 
   * @param body 
   */
  def resend verify phone token(body: ResendVerifyPhoneTokenRequest): ApiRequest[ResendVerifyPhoneTokenResponse] =
    ApiRequest[ResendVerifyPhoneTokenResponse](ApiMethods.POST, "https://api.mbill.co/", "/api/v1/user/verify/phone/resend", "application/json")
      .withBody(body)
      .withSuccessResponse[ResendVerifyPhoneTokenResponse](200)
      .withErrorResponse[Unit](404)
        /**
   * 
   * Expected answers:
   *   code 200 : ResetPasswordResponse 
   *   code 404 :  
   *   code 422 :  
   * 
   * @param body 
   */
  def reset password(body: ResetPasswordRequest): ApiRequest[ResetPasswordResponse] =
    ApiRequest[ResetPasswordResponse](ApiMethods.POST, "https://api.mbill.co/", "/api/v1/user/password", "application/json")
      .withBody(body)
      .withSuccessResponse[ResetPasswordResponse](200)
      .withErrorResponse[Unit](404)
      .withErrorResponse[Unit](422)
        /**
   * Send to specified email invoice and link to Page.
   * 
   * Expected answers:
   *   code 200 : SendInvoiceResponse 
   *   code 401 :  
   * 
   * @param id Page ID, MongoID
   */
  def send Invoice(id: String): ApiRequest[SendInvoiceResponse] =
    ApiRequest[SendInvoiceResponse](ApiMethods.POST, "https://api.mbill.co/", "/api/v1/user/pages/{id}/invoice", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[SendInvoiceResponse](200)
      .withErrorResponse[Unit](401)
        /**
   * Initialization messaging via intercom by user
   * 
   * Expected answers:
   *   code 200 : SendMessageToSupportResponse 
   * 
   * @param body 
   */
  def send message to support(body: SendMessageToSupportRequest): ApiRequest[SendMessageToSupportResponse] =
    ApiRequest[SendMessageToSupportResponse](ApiMethods.POST, "https://api.mbill.co/", "/api/v1/messages", "application/json")
      .withBody(body)
      .withSuccessResponse[SendMessageToSupportResponse](200)
        /**
   * The user will be sent an SMS or a letter with a confirmation code to change the password to the specified phone or email. * If this is a phone, then the answer is the check_digit field, in which the check digit is for checking the integrity of the SMS token. The format of the token in sms is 412345, where the first digit is check_digit, the remaining five is the token itself. * If the user does not have activated mail and phone, the code or link will be resent to activate the phone or mail * If the phone is inactive, then the answer will be an additional check digit check_digit_activation for the activation code
   * 
   * Expected answers:
   *   code 200 : SendPasswordResetTokenResponse 
   *   code 404 :  
   * 
   * @param body 
   */
  def send password reset token(body: SendPasswordResetTokenRequest): ApiRequest[SendPasswordResetTokenResponse] =
    ApiRequest[SendPasswordResetTokenResponse](ApiMethods.POST, "https://api.mbill.co/", "/api/v1/user/password/reset", "application/json")
      .withBody(body)
      .withSuccessResponse[SendPasswordResetTokenResponse](200)
      .withErrorResponse[Unit](404)
        /**
   * There are two ways to Sign Up new User: * via social profiles (see &#x60;Authorization&#x60; endpoints); * via email and password; * via phone and password. #### Phone Sign Up Response will contain check_digit that will be first in sent message (it is used for better user experience to distinguish when user received multiple OTP codes). Rest of OTP code is token that MUST be used to confirm account activation. #### Email Sign Up Email will be verified when used clicks a link that is sent to it or by sending it&#39;s token to &#x60;Verify Email&#x60; service. Before email is verified it&#39;s listed in &#x60;temporary_email&#x60; field as \&quot;Email that awaits verification\&quot;. #### Other features You can pass optional &#x60;card_number&#x60; parameter to automatically create page that will receive payment to specified card.
   * 
   * Expected answers:
   *   code 200 : SignUp via email and~1or password response 
   * 
   * @param body 
   */
  def signUp via Email and/or Password(body: SignUp via email and~1or password request): ApiRequest[SignUp via email and~1or password response] =
    ApiRequest[SignUp via email and~1or password response](ApiMethods.POST, "https://api.mbill.co/", "/api/v1/users", "application/json")
      .withBody(body)
      .withSuccessResponse[SignUp via email and~1or password response](200)
        /**
   * Send empty object to override previous token and delete it.
   * 
   * Expected answers:
   *   code 200 : UnlinkSocialProfileResponse 
   *   code 424 :  
   * 
   * @param &#x60;type&#x60; 
   */
  def unlink Social Profile(&#x60;type&#x60;: String): ApiRequest[UnlinkSocialProfileResponse] =
    ApiRequest[UnlinkSocialProfileResponse](ApiMethods.POST, "https://api.mbill.co/", "/api/v1/user/profile/{type}", "application/json")
      .withPathParam("type", &#x60;type&#x60;)
      .withSuccessResponse[UnlinkSocialProfileResponse](200)
      .withErrorResponse[Unit](424)
        /**
   * 
   * Expected answers:
   *   code 200 : UpdateCurrentUserResponse 
   *   code 401 :  
   *   code 422 :  
   * 
   * @param body 
   */
  def update current User(body: UpdateCurrentUserRequest): ApiRequest[UpdateCurrentUserResponse] =
    ApiRequest[UpdateCurrentUserResponse](ApiMethods.PUT, "https://api.mbill.co/", "/api/v1/user", "application/json")
      .withBody(body)
      .withSuccessResponse[UpdateCurrentUserResponse](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](422)
        /**
   * After registration by email or after changing email by user, code for verification will be sent to email. It must be sent for verification email and account activation.
   * 
   * Expected answers:
   *   code 200 : VerifyEmailResponse 
   *   code 404 :  
   *   code 422 :  
   * 
   * @param body 
   */
  def verify Email(body: VerifyEmailRequest): ApiRequest[VerifyEmailResponse] =
    ApiRequest[VerifyEmailResponse](ApiMethods.POST, "https://api.mbill.co/", "/api/v1/user/verify/email", "application/json")
      .withBody(body)
      .withSuccessResponse[VerifyEmailResponse](200)
      .withErrorResponse[Unit](404)
      .withErrorResponse[Unit](422)
        /**
   * After registration by phone or after changing phone number by user, code for verification will be sent to phone. It must be sent for verification phone number and account activation.
   * 
   * Expected answers:
   *   code 200 : VerifyPhoneResponse 
   *   code 404 :  
   *   code 422 :  
   * 
   * @param body 
   */
  def verify phone(body: VerifyPhoneRequest): ApiRequest[VerifyPhoneResponse] =
    ApiRequest[VerifyPhoneResponse](ApiMethods.POST, "https://api.mbill.co/", "/api/v1/user/verify/phone", "application/json")
      .withBody(body)
      .withSuccessResponse[VerifyPhoneResponse](200)
      .withErrorResponse[Unit](404)
      .withErrorResponse[Unit](422)
        /**
   * This authorization method will Sign In user by Vk.com &#x60;access_token&#x60; or create account if used was not found among Mbill users.
   * 
   * Expected answers:
   *   code 200 : VkontakteResponse 
   *   code 400 :  
   *   code 422 :  
   * 
   * @param body 
   */
  def vkontakte(body: VkontakteRequest): ApiRequest[VkontakteResponse] =
    ApiRequest[VkontakteResponse](ApiMethods.POST, "https://api.mbill.co/", "/oauth/vkontakte", "application/json")
      .withBody(body)
      .withSuccessResponse[VkontakteResponse](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](422)
      

}

