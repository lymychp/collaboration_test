{
  "swagger" : "2.0",
  "info" : {
    "description" : "TODO: Add a description",
    "version" : "1.0",
    "title" : "Mbill API",
    "license" : {
      "name" : "MIT",
      "url" : "http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT"
    }
  },
  "host" : "api.mbill.co",
  "basePath" : "/",
  "schemes" : [ "https" ],
  "consumes" : [ "application/json" ],
  "produces" : [ "application/json" ],
  "paths" : {
    "/api/v1/users" : {
      "post" : {
        "summary" : "Sign-Up via Email and/or Password",
        "description" : "There are two ways to Sign Up new User:\n* via social profiles (see `Authorization` endpoints);\n* via email and password;\n* via phone and password.\n#### Phone Sign Up\nResponse will contain check_digit that will be first in sent message (it is used for better user experience to distinguish when user received multiple OTP codes). Rest of OTP code is token that MUST be used to confirm account activation.\n#### Email Sign Up\nEmail will be verified when used clicks a link that is sent to it or by sending it's token to `Verify Email` service. Before email is verified it's listed in `temporary_email` field as \"Email that awaits verification\".\n#### Other features\nYou can pass optional `card_number` parameter to automatically create page that will receive payment to specified card.",
        "operationId" : "Sign-Up via Email and/or Password",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SignUp via email and~1or password request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/SignUp via email and~1or password response"
            },
            "examples" : { }
          }
        },
        "x-unitTests" : [ ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/user/verify/email" : {
      "post" : {
        "summary" : "Verify Email",
        "description" : "After registration by email or after changing email by user, code for verification will be sent to email. It must be sent for verification email and account activation.",
        "operationId" : "Verify Email",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VerifyEmailRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/VerifyEmailResponse"
            },
            "examples" : { }
          },
          "404" : {
            "description" : ""
          },
          "422" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/user/verify/phone" : {
      "post" : {
        "summary" : "Verify phone",
        "description" : "After registration by phone or after changing phone number by user, code for verification will be sent to phone. It must be sent for verification phone number and account activation.",
        "operationId" : "Verify phone",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VerifyPhoneRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/VerifyPhoneResponse"
            },
            "examples" : { }
          },
          "404" : {
            "description" : ""
          },
          "422" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/user/verify/email/resend" : {
      "post" : {
        "summary" : "Resend verify email token",
        "description" : "Re-send the link for confirmation email. The user will receive a letter with a code for confirmation of e-mail",
        "operationId" : "Resend verify email token",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ResendVerifyEmailTokenRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/ResendVerifyEmailTokenResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : { },
                "dev" : {
                  "token" : "$2y$10$vWmVfDnPPOn4pC5MFEPiP.DkQRtFCqqq0k7V3v8qognX89AarWe",
                  "expired" : 1491217485
                }
              }
            }
          },
          "404" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "POST",
            "uri" : "/api/v1/user/verify/email/resend",
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"email\": \"test@example.com\"}"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": {},  \"dev\": {    \"token\": \"$2y$10$vWmVfDnPPOn4pC5MFEPiP.DkQRtFCqqq0k7V3v8qognX89AarWe\",    \"expired\": 1491217485  }}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Resend verify email token1",
          "x-testDescription" : "Re-send the link for confirmation email. The user will receive a letter with a code for confirmation of e-mail"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/user/verify/phone/resend" : {
      "post" : {
        "summary" : "Resend verify phone token",
        "description" : "Resending the code to sms for confirmation of the phone",
        "operationId" : "Resend verify phone token",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ResendVerifyPhoneTokenRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/ResendVerifyPhoneTokenResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : { },
                "dev" : {
                  "token" : 774277,
                  "expired" : 1491217485
                }
              }
            }
          },
          "404" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "POST",
            "uri" : "/api/v1/user/verify/phone/resend",
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"phone\": \"+380631112233\"}"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": {},  \"dev\": {    \"token\": 774277,    \"expired\": 1491217485  }}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Resend verify phone token1",
          "x-testDescription" : "Resending the code to sms for confirmation of the phone"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/oauth/base" : {
      "get" : {
        "summary" : "Base",
        "description" : "Getting an authorization token by mail or phone and password.",
        "operationId" : "Base",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/BaseResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : {
                  "token" : {
                    "token_type" : "bearer",
                    "access_token" : "b04792ffd43765d0a7f26ffc802c51744190d5c5"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "GET",
            "uri" : "/oauth/base"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": {    \"token\": {      \"token_type\": \"bearer\",      \"access_token\": \"b04792ffd43765d0a7f26ffc802c51744190d5c5\"    }  }}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Base1",
          "x-testDescription" : "Getting an authorization token by mail or phone and password."
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/oauth/facebook" : {
      "post" : {
        "summary" : "Facebook",
        "description" : "This authorization method will Sign In user by Facebook `access_token` or create account if used was not found among Mbill users.",
        "operationId" : "Facebook",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FacebookRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/FacebookResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : {
                  "token" : {
                    "token_type" : "bearer",
                    "access_token" : "b04792ffd43765d0a7f26ffc802c51744190d5c5"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : ""
          },
          "422" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "POST",
            "uri" : "/oauth/facebook",
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"token\": \"access_token\"}"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": {    \"token\": {      \"token_type\": \"bearer\",      \"access_token\": \"b04792ffd43765d0a7f26ffc802c51744190d5c5\"    }  }}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Facebook1",
          "x-testDescription" : "This authorization method will Sign In user by Facebook `access_token` or create account if used was not found among Mbill users."
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/oauth/vkontakte" : {
      "post" : {
        "summary" : "Vkontakte",
        "description" : "This authorization method will Sign In user by Vk.com `access_token` or create account if used was not found among Mbill users.",
        "operationId" : "Vkontakte",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VkontakteRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/VkontakteResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : {
                  "token" : {
                    "token_type" : "bearer",
                    "access_token" : "b04792ffd43765d0a7f26ffc802c51744190d5c5"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : ""
          },
          "422" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "POST",
            "uri" : "/oauth/vkontakte",
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"token\": \"access_token\"}"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": {    \"token\": {      \"token_type\": \"bearer\",      \"access_token\": \"b04792ffd43765d0a7f26ffc802c51744190d5c5\"    }  }}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Vkontakte1",
          "x-testDescription" : "This authorization method will Sign In user by Vk.com `access_token` or create account if used was not found among Mbill users."
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/oauth/google" : {
      "post" : {
        "summary" : "Google+",
        "description" : "This authorization method will Sign In user by G+ `access_token` or create account if used was not found among Mbill users.",
        "operationId" : "Google+",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Google+Request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/Google+Response"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : {
                  "token" : {
                    "token_type" : "bearer",
                    "access_token" : "b04792ffd43765d0a7f26ffc802c51744190d5c5"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : ""
          },
          "422" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "POST",
            "uri" : "/oauth/google",
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"token\": \"access_token\"}"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": {    \"token\": {      \"token_type\": \"bearer\",      \"access_token\": \"b04792ffd43765d0a7f26ffc802c51744190d5c5\"    }  }}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Google+1",
          "x-testDescription" : "This authorization method will Sign In user by G+ `access_token` or create account if used was not found among Mbill users."
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/user" : {
      "get" : {
        "summary" : "Get current User",
        "description" : "Getting current (logged in) user data.",
        "operationId" : "Get current User",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/GetCurrentUserResponse"
            },
            "examples" : { }
          },
          "401" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      },
      "put" : {
        "summary" : "Update current User",
        "description" : "",
        "operationId" : "Update current User",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpdateCurrentUserRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/UpdateCurrentUserResponse"
            },
            "examples" : { }
          },
          "401" : {
            "description" : ""
          },
          "422" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/user/password/reset" : {
      "post" : {
        "summary" : "Send password reset token",
        "description" : "The user will be sent an SMS or a letter with a confirmation code to change the password to the specified phone or email.\n* If this is a phone, then the answer is the check_digit field, in which the check digit is for checking the integrity of the SMS token. The format of the token in sms is 412345, where the first digit is check_digit, the remaining five is the token itself.\n* If the user does not have activated mail and phone, the code or link will be resent to activate the phone or mail\n* If the phone is inactive, then the answer will be an additional check digit check_digit_activation for the activation code",
        "operationId" : "Send password reset token",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SendPasswordResetTokenRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/SendPasswordResetTokenResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : {
                  "check_digit" : 7
                },
                "dev" : {
                  "token_email" : {
                    "token" : "$2y$10$vWmVfDnPPOn4pC5MFEPiP.DkQRtFCqqq0k7V3v8qognX89AarWe",
                    "expired" : 1491217485
                  },
                  "token_phone" : {
                    "token" : 774277,
                    "expired" : 1491217485
                  }
                }
              }
            }
          },
          "404" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "POST",
            "uri" : "/api/v1/user/password/reset",
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"email\": \"test@example.com\",  \"phone\": \"+3809876543321\"}"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": {    \"check_digit\": 7  },  \"dev\": {    \"token_email\": {      \"token\": \"$2y$10$vWmVfDnPPOn4pC5MFEPiP.DkQRtFCqqq0k7V3v8qognX89AarWe\",      \"expired\": 1491217485    },    \"token_phone\": {      \"token\": 774277,      \"expired\": 1491217485    }  }}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Send password reset token1",
          "x-testDescription" : "The user will be sent an SMS or a letter with a confirmation code to change the password to the specified phone or email.\n* If this is a phone, then the answer is the check_digit field, in which the check digit is for checking the integrity of the SMS token. The format of the token in sms is 412345, where the first digit is check_digit, the remaining five is the token itself.\n* If the user does not have activated mail and phone, the code or link will be resent to activate the phone or mail\n* If the phone is inactive, then the answer will be an additional check digit check_digit_activation for the activation code"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/user/password" : {
      "post" : {
        "summary" : "Reset password",
        "description" : "",
        "operationId" : "Reset password",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ResetPasswordRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/ResetPasswordResponse"
            },
            "examples" : { }
          },
          "404" : {
            "description" : ""
          },
          "422" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/user/profile/{type}" : {
      "post" : {
        "summary" : "Unlink Social Profile",
        "description" : "Send empty object to override previous token and delete it.",
        "operationId" : "Unlink Social Profile",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "",
          "required" : true,
          "type" : "string",
          "enum" : [ "facebook", "google", "vkontakte" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/UnlinkSocialProfileResponse"
            },
            "examples" : { }
          },
          "424" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/messages" : {
      "post" : {
        "summary" : "Send message to support",
        "description" : "Initialization messaging via intercom by user",
        "operationId" : "Send message to support",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SendMessageToSupportRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/SendMessageToSupportResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : {
                  "type" : "user_message",
                  "id" : "44336186",
                  "created_at\"" : "147308490",
                  "body" : "Hi dudes",
                  "message_type" : "inapp",
                  "x_rate_limit" : "500",
                  "x_rate_remaining" : "499",
                  "x_rate_reset" : "1473084960"
                }
              }
            }
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "POST",
            "uri" : "/api/v1/messages",
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"email\": \"test@example.com\",  \"name\": \"Sam\",  \"message\": \"Hi dudes\"}"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": {    \"type\": \"user_message\",    \"id\": \"44336186\",    \"created_at\\\"\": \"147308490\",    \"body\": \"Hi dudes\",    \"message_type\": \"inapp\",    \"x_rate_limit\": \"500\",    \"x_rate_remaining\": \"499\",    \"x_rate_reset\": \"1473084960\"  }}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Send message to support1",
          "x-testDescription" : "Initialization messaging via intercom by user"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/user/pages/" : {
      "get" : {
        "summary" : "Get current User Pages",
        "description" : "Getting user pages with filters",
        "operationId" : "Get current User Pages",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "starting_after",
          "in" : "query",
          "description" : "Paginate element",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit pages into response (if -1 you'll get all pages)",
          "required" : true,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "is_active",
          "in" : "query",
          "description" : "Filter by active pages",
          "required" : true,
          "type" : "boolean"
        }, {
          "name" : "title",
          "in" : "query",
          "description" : "Filter by page title, looking for entry in the title",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/GetCurrentUserPagesResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : [ {
                  "id" : "58e2278b84092e68020041aa",
                  "short_id" : "a",
                  "title" : "Payment page",
                  "description" : "Pay me please",
                  "logo" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
                  "amount" : 100,
                  "payments_count" : 0,
                  "is_active" : 1,
                  "is_default" : 1,
                  "updated_at" : "2017",
                  "created_at" : "2017",
                  "limits" : [ {
                    "type" : "count_max",
                    "value" : 5,
                    "current" : 0,
                    "is_exceeded" : false
                  }, {
                    "type" : "expires_at",
                    "value" : 2017,
                    "is_exceeded" : false
                  } ],
                  "card" : {
                    "id" : "58e2278a84092e61700041a7",
                    "number" : "2860"
                  },
                  "user" : {
                    "nickname" : "ivan",
                    "first_name" : "Ivan",
                    "last_name" : "Ivanov",
                    "image" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
                    "is_anonymous" : false
                  }
                } ],
                "paginate" : {
                  "limit" : 20,
                  "starting_after" : "56c31536a60ad644060041af",
                  "ending_before" : "58e5f1dfa60ad6b5330041b3",
                  "count" : 1000
                }
              }
            }
          },
          "401" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "GET",
            "uri" : "/api/v1/user/pages/?starting_after=58e2278a84092e61700041a7&limit=10&is_active=true&title=Test"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{\"meta\":{\"code\":200},\"data\":[{\"id\":\"58e2278b84092e68020041aa\",\"short_id\":\"a\",\"title\":\"Payment page\",\"description\":\"Pay me please\",\"logo\":\"http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38\",\"amount\":100,\"payments_count\":0,\"is_active\":1,\"is_default\":1,\"updated_at\":\"2017\",\"created_at\":\"2017\",\"limits\":[{\"type\":\"count_max\",\"value\":5,\"current\":0,\"is_exceeded\":false},{\"type\":\"expires_at\",\"value\":2017.0,\"is_exceeded\":false}],\"card\":{\"id\":\"58e2278a84092e61700041a7\",\"number\":\"2860\"},\"user\":{\"nickname\":\"ivan\",\"first_name\":\"Ivan\",\"last_name\":\"Ivanov\",\"image\":\"http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38\",\"is_anonymous\":false}}],\"paginate\":{\"limit\":20,\"starting_after\":\"56c31536a60ad644060041af\",\"ending_before\":\"58e5f1dfa60ad6b5330041b3\",\"count\":1000}}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Get current User Pages1",
          "x-testDescription" : "Getting user pages with filters"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/user/cards" : {
      "post" : {
        "summary" : "Add a new Card for current User",
        "description" : "",
        "operationId" : "Add a new Card for current User",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AddANewCardForCurrentUserRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/AddANewCardForCurrentUserResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : {
                  "id" : "58e2278a84092e61700041a7",
                  "number" : "5237********1358",
                  "active" : true,
                  "turnover" : 0
                }
              }
            }
          },
          "401" : {
            "description" : ""
          },
          "422" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "POST",
            "uri" : "/api/v1/user/cards",
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"number\": \"0000111122223333\",  \"active\": true}"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": {    \"id\": \"58e2278a84092e61700041a7\",    \"number\": \"5237********1358\",    \"active\": true,    \"turnover\": 0  }}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Add a new Card for current User1",
          "x-testDescription" : "Testcase for testing endpoint Add a new Card for current User"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/user/cards/{id}" : {
      "put" : {
        "summary" : "Edit Card Data",
        "description" : "",
        "operationId" : "Edit Card Data",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Card ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EditCardDataRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/EditCardDataResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : {
                  "id" : "58e2278a84092e61700041a7",
                  "number" : "5237********1358",
                  "active" : true,
                  "turnover" : 0
                }
              }
            }
          },
          "401" : {
            "description" : ""
          },
          "422" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "PUT",
            "uri" : "/api/v1/user/cards/58e2278a84092e61700041a7",
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"number\": \"0000111122223333\",  \"active\": true}"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": {    \"id\": \"58e2278a84092e61700041a7\",    \"number\": \"5237********1358\",    \"active\": true,    \"turnover\": 0  }}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Edit Card Data1",
          "x-testDescription" : "Testcase for testing endpoint Edit Card Data"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      },
      "delete" : {
        "summary" : "Delete Card",
        "description" : "",
        "operationId" : "Delete Card",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Card ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/DeleteCardResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : { }
              }
            }
          },
          "401" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "DELETE",
            "uri" : "/api/v1/user/cards/58e2278a84092e61700041a7"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": {}}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Delete Card1",
          "x-testDescription" : "Testcase for testing endpoint Delete Card"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/user/cards/{id}/pages" : {
      "get" : {
        "summary" : "List pages that is using Card",
        "description" : "",
        "operationId" : "List pages that is using Card",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Card ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/ListPagesThatIsUsingCardResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : [ {
                  "id" : "58e2278b84092e68020041aa",
                  "short_id" : "a",
                  "title" : "Payment page",
                  "description" : "Pay me please",
                  "logo" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
                  "amount" : 100,
                  "payments_count" : 0,
                  "is_active" : 1,
                  "is_default" : 1,
                  "updated_at" : "2017",
                  "created_at" : "2017",
                  "limits" : [ {
                    "type" : "count_max",
                    "value" : 5,
                    "current" : 0,
                    "is_exceeded" : false
                  }, {
                    "type" : "expires_at",
                    "value" : 2017,
                    "is_exceeded" : false
                  } ],
                  "card_id" : "58e2278a84092e61700041a7"
                } ]
              }
            }
          },
          "401" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "GET",
            "uri" : "/api/v1/user/cards/58e2278a84092e61700041a7/pages"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{\"meta\":{\"code\":200},\"data\":[{\"id\":\"58e2278b84092e68020041aa\",\"short_id\":\"a\",\"title\":\"Payment page\",\"description\":\"Pay me please\",\"logo\":\"http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38\",\"amount\":100,\"payments_count\":0,\"is_active\":1,\"is_default\":1,\"updated_at\":\"2017\",\"created_at\":\"2017\",\"limits\":[{\"type\":\"count_max\",\"value\":5,\"current\":0,\"is_exceeded\":false},{\"type\":\"expires_at\",\"value\":2017.0,\"is_exceeded\":false}],\"card_id\":\"58e2278a84092e61700041a7\"}]}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "List pages that is using Card1",
          "x-testDescription" : "Testcase for testing endpoint List pages that is using Card"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/user/pages" : {
      "get" : {
        "summary" : "Get current User Pages",
        "description" : "",
        "operationId" : "Get current User Pages1",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/GetCurrentUserPagesResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : [ {
                  "id" : "58e2278b84092e68020041aa",
                  "short_id" : "a",
                  "title" : "Payment page",
                  "description" : "Pay me please",
                  "logo" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
                  "amount" : 100,
                  "payments_count" : 0,
                  "is_active" : 1,
                  "is_default" : 1,
                  "updated_at" : "2017",
                  "created_at" : "2017",
                  "limits" : [ {
                    "type" : "count_max",
                    "value" : 5,
                    "current" : 0,
                    "is_exceeded" : false
                  }, {
                    "type" : "expires_at",
                    "value" : 2017,
                    "is_exceeded" : false
                  } ],
                  "card" : {
                    "id" : "58e2278a84092e61700041a7",
                    "number" : "2860"
                  },
                  "user" : {
                    "nickname" : "ivan",
                    "first_name" : "Ivan",
                    "last_name" : "Ivanov",
                    "image" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
                    "is_anonymous" : false
                  }
                } ],
                "paginate" : {
                  "limit" : 20,
                  "starting_after" : "56c31536a60ad644060041af",
                  "ending_before" : "58e5f1dfa60ad6b5330041b3",
                  "count" : 1000
                }
              }
            }
          },
          "401" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "GET",
            "uri" : "/api/v1/user/pages"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{\"meta\":{\"code\":200},\"data\":[{\"id\":\"58e2278b84092e68020041aa\",\"short_id\":\"a\",\"title\":\"Payment page\",\"description\":\"Pay me please\",\"logo\":\"http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38\",\"amount\":100,\"payments_count\":0,\"is_active\":1,\"is_default\":1,\"updated_at\":\"2017\",\"created_at\":\"2017\",\"limits\":[{\"type\":\"count_max\",\"value\":5,\"current\":0,\"is_exceeded\":false},{\"type\":\"expires_at\",\"value\":2017.0,\"is_exceeded\":false}],\"card\":{\"id\":\"58e2278a84092e61700041a7\",\"number\":\"2860\"},\"user\":{\"nickname\":\"ivan\",\"first_name\":\"Ivan\",\"last_name\":\"Ivanov\",\"image\":\"http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38\",\"is_anonymous\":false}}],\"paginate\":{\"limit\":20,\"starting_after\":\"56c31536a60ad644060041af\",\"ending_before\":\"58e5f1dfa60ad6b5330041b3\",\"count\":1000}}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Get current User Pages11",
          "x-testDescription" : "Testcase for testing endpoint Get current User Pages"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      },
      "post" : {
        "summary" : "Create User Page",
        "description" : "",
        "operationId" : "Create User Page",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateUserPageRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/CreateUserPageResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : {
                  "id" : "58e2278b84092e68020041aa",
                  "short_id" : "a",
                  "title" : "Payment page",
                  "description" : "Pay me please",
                  "logo" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
                  "amount" : 100,
                  "payments_count" : 0,
                  "is_active" : 1,
                  "is_default" : 1,
                  "updated_at" : "2017",
                  "created_at" : "2017",
                  "limits" : [ {
                    "type" : "count_max",
                    "value" : 5,
                    "current" : 0,
                    "is_exceeded" : false
                  }, {
                    "type" : "expires_at",
                    "value" : 2017,
                    "is_exceeded" : false
                  } ],
                  "card" : {
                    "id" : "58e2278a84092e61700041a7",
                    "number" : "2860"
                  },
                  "user" : {
                    "nickname" : "ivan",
                    "first_name" : "Ivan",
                    "last_name" : "Ivanov",
                    "image" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
                    "is_anonymous" : false
                  }
                }
              }
            }
          },
          "401" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "POST",
            "uri" : "/api/v1/user/pages",
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"card_id\": \"58e2278a84092e61700041a7\",  \"amount\": 1000,  \"title\": \"Death Star\",  \"description\": \"Crowdfunding Death Star\",  \"is_active\": true,  \"is_default\": true,  \"logo\": \"http://gravatar.com/avatar/default\",  \"limits\": {    \"count_max\": 100,    \"expires_at\": \"2016-08-25T13:20:50+0000\"  }}"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{\"meta\":{\"code\":200},\"data\":{\"id\":\"58e2278b84092e68020041aa\",\"short_id\":\"a\",\"title\":\"Payment page\",\"description\":\"Pay me please\",\"logo\":\"http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38\",\"amount\":100,\"payments_count\":0,\"is_active\":1,\"is_default\":1,\"updated_at\":\"2017\",\"created_at\":\"2017\",\"limits\":[{\"type\":\"count_max\",\"value\":5,\"current\":0,\"is_exceeded\":false},{\"type\":\"expires_at\",\"value\":2017.0,\"is_exceeded\":false}],\"card\":{\"id\":\"58e2278a84092e61700041a7\",\"number\":\"2860\"},\"user\":{\"nickname\":\"ivan\",\"first_name\":\"Ivan\",\"last_name\":\"Ivanov\",\"image\":\"http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38\",\"is_anonymous\":false}}}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Create User Page1",
          "x-testDescription" : "Testcase for testing endpoint Create User Page"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/pages" : {
      "get" : {
        "summary" : "Get all Pages",
        "description" : "",
        "operationId" : "Get all Pages",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/GetAllPagesResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : [ {
                  "id" : "58e2278b84092e68020041aa",
                  "short_id" : "a",
                  "title" : "Payment page",
                  "description" : "Pay me please",
                  "logo" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
                  "amount" : 100,
                  "payments_count" : 0,
                  "is_active" : 1,
                  "is_default" : 1,
                  "updated_at" : "2017",
                  "created_at" : "2017",
                  "limits" : [ {
                    "type" : "count_max",
                    "value" : 5,
                    "current" : 0,
                    "is_exceeded" : false
                  }, {
                    "type" : "expires_at",
                    "value" : 2017,
                    "is_exceeded" : false
                  } ],
                  "card" : {
                    "id" : "58e2278a84092e61700041a7",
                    "number" : "2860"
                  },
                  "user" : {
                    "nickname" : "ivan",
                    "first_name" : "Ivan",
                    "last_name" : "Ivanov",
                    "image" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
                    "is_anonymous" : false
                  }
                } ],
                "paginate" : {
                  "limit" : 20,
                  "starting_after" : "56c31536a60ad644060041af",
                  "ending_before" : "58e5f1dfa60ad6b5330041b3",
                  "count" : 1000
                }
              }
            }
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "GET",
            "uri" : "/api/v1/pages"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{\"meta\":{\"code\":200},\"data\":[{\"id\":\"58e2278b84092e68020041aa\",\"short_id\":\"a\",\"title\":\"Payment page\",\"description\":\"Pay me please\",\"logo\":\"http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38\",\"amount\":100,\"payments_count\":0,\"is_active\":1,\"is_default\":1,\"updated_at\":\"2017\",\"created_at\":\"2017\",\"limits\":[{\"type\":\"count_max\",\"value\":5,\"current\":0,\"is_exceeded\":false},{\"type\":\"expires_at\",\"value\":2017.0,\"is_exceeded\":false}],\"card\":{\"id\":\"58e2278a84092e61700041a7\",\"number\":\"2860\"},\"user\":{\"nickname\":\"ivan\",\"first_name\":\"Ivan\",\"last_name\":\"Ivanov\",\"image\":\"http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38\",\"is_anonymous\":false}}],\"paginate\":{\"limit\":20,\"starting_after\":\"56c31536a60ad644060041af\",\"ending_before\":\"58e5f1dfa60ad6b5330041b3\",\"count\":1000}}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Get all Pages1",
          "x-testDescription" : "Testcase for testing endpoint Get all Pages"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      },
      "post" : {
        "summary" : "Create Anonymous Page",
        "description" : "Anonymous pages can be created by unauthorized users, they will be short-lived and impossible to edit.",
        "operationId" : "Create Anonymous Page",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateAnonymousPageRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/CreateAnonymousPageResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : {
                  "id" : "58e2278b84092e68020041aa",
                  "short_id" : "a",
                  "title" : "Payment page",
                  "description" : "Pay me please",
                  "logo" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
                  "amount" : 100,
                  "payments_count" : 0,
                  "is_active" : 1,
                  "is_default" : 1,
                  "updated_at" : "2017",
                  "created_at" : "2017",
                  "limits" : [ {
                    "type" : "count_max",
                    "value" : 5,
                    "current" : 0,
                    "is_exceeded" : false
                  }, {
                    "type" : "expires_at",
                    "value" : 2017,
                    "is_exceeded" : false
                  } ],
                  "card" : {
                    "id" : "58e2278a84092e61700041a7",
                    "number" : "2860"
                  },
                  "user" : {
                    "nickname" : "ivan",
                    "first_name" : "Ivan",
                    "last_name" : "Ivanov",
                    "image" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
                    "is_anonymous" : false
                  }
                }
              }
            }
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "POST",
            "uri" : "/api/v1/pages",
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"card_number\": \"4242000011112222\",  \"amount\": 1000,  \"title\": \"Death Star\",  \"description\": \"Crowdfunding Death Star\",  \"logo\": \"http://gravatar.com/avatar/default\",  \"limits\": {    \"count_max\": 100,    \"expires_at\": \"2016-08-25T13:20:50+0000\"  }}"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{\"meta\":{\"code\":200},\"data\":{\"id\":\"58e2278b84092e68020041aa\",\"short_id\":\"a\",\"title\":\"Payment page\",\"description\":\"Pay me please\",\"logo\":\"http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38\",\"amount\":100,\"payments_count\":0,\"is_active\":1,\"is_default\":1,\"updated_at\":\"2017\",\"created_at\":\"2017\",\"limits\":[{\"type\":\"count_max\",\"value\":5,\"current\":0,\"is_exceeded\":false},{\"type\":\"expires_at\",\"value\":2017.0,\"is_exceeded\":false}],\"card\":{\"id\":\"58e2278a84092e61700041a7\",\"number\":\"2860\"},\"user\":{\"nickname\":\"ivan\",\"first_name\":\"Ivan\",\"last_name\":\"Ivanov\",\"image\":\"http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38\",\"is_anonymous\":false}}}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Create Anonymous Page1",
          "x-testDescription" : "Anonymous pages can be created by unauthorized users, they will be short-lived and impossible to edit."
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/dtek/pages" : {
      "post" : {
        "summary" : "Create DTEK Page",
        "description" : "Anonymous pages can be created by unauthorized users, they will be short-lived and impossible to edit.\n`api-key` should be used to authorize consumer back-end.",
        "operationId" : "Create DTEK Page",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateDtekPageRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/CreateDtekPageResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : {
                  "id" : "58e2278b84092e68020041aa",
                  "short_id" : "a",
                  "title" : "Payment page",
                  "description" : "Pay me please",
                  "logo" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
                  "amount" : 100,
                  "payments_count" : 0,
                  "is_active" : 1,
                  "is_default" : 1,
                  "updated_at" : "2017",
                  "created_at" : "2017",
                  "limits" : [ {
                    "type" : "count_max",
                    "value" : 5,
                    "current" : 0,
                    "is_exceeded" : false
                  }, {
                    "type" : "expires_at",
                    "value" : 2017,
                    "is_exceeded" : false
                  } ],
                  "account_number" : "30043223443",
                  "res_id: DTEK_001" : "",
                  "sender_name" : "Іванов Іван Іванович",
                  "sender_email" : "ivanov@mail.com",
                  "sender_phone" : "+380971111111"
                }
              }
            }
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "POST",
            "uri" : "/api/v1/dtek/pages",
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"sender\": {    \"account_number\": \"30043223443\",    \"name\": \"Іванов Іван Іванович\",    \"email\": \"ivanov@mail.com\",    \"phone\": \"+380971111111\",    \"address\": {      \"area\": \"Житомирська\",      \"region\": \"Бердичівський\",      \"settlement\": \"Київ\",      \"settlement_type\": \"CITY\",      \"street_type\": \"STREET\",      \"street\": \"Ніжинська\",      \"building\": \"15\",      \"apartment\": \"23\",      \"zip\": \"02090\"    }  },  \"res_id: DTEK_001\": \"\",  \"amount\": 1000,  \"title\": \"Оплата за електроенергію, жовтень 2017\",  \"description\": \"Crowdfunding Death Star\",  \"logo\": \"http://gravatar.com/avatar/default\",  \"limits\": {    \"count_max\": 100,    \"expires_at\": \"2016-08-25T13:20:50+0000\"  }}"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{\"meta\":{\"code\":200},\"data\":{\"id\":\"58e2278b84092e68020041aa\",\"short_id\":\"a\",\"title\":\"Payment page\",\"description\":\"Pay me please\",\"logo\":\"http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38\",\"amount\":100,\"payments_count\":0,\"is_active\":1,\"is_default\":1,\"updated_at\":\"2017\",\"created_at\":\"2017\",\"limits\":[{\"type\":\"count_max\",\"value\":5,\"current\":0,\"is_exceeded\":false},{\"type\":\"expires_at\",\"value\":2017.0,\"is_exceeded\":false}],\"account_number\":\"30043223443\",\"res_id: DTEK_001\":\"\",\"sender_name\":\"Іванов Іван Іванович\",\"sender_email\":\"ivanov@mail.com\",\"sender_phone\":\"+380971111111\"}}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Create DTEK Page1",
          "x-testDescription" : "Anonymous pages can be created by unauthorized users, they will be short-lived and impossible to edit.\n`api-key` should be used to authorize consumer back-end."
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/user/pages/{id}" : {
      "get" : {
        "summary" : "Get current User Page",
        "description" : "",
        "operationId" : "Get current User Page",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Page ID, MongoID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/GetCurrentUserPageResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : {
                  "id" : "58e2278b84092e68020041aa",
                  "short_id" : "a",
                  "title" : "Payment page",
                  "description" : "Pay me please",
                  "logo" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
                  "amount" : 100,
                  "payments_count" : 0,
                  "is_active" : 1,
                  "is_default" : 1,
                  "updated_at" : "2017",
                  "created_at" : "2017",
                  "limits" : [ {
                    "type" : "count_max",
                    "value" : 5,
                    "current" : 0,
                    "is_exceeded" : false
                  }, {
                    "type" : "expires_at",
                    "value" : 2017,
                    "is_exceeded" : false
                  } ],
                  "card" : {
                    "id" : "58e2278a84092e61700041a7",
                    "number" : "2860"
                  },
                  "user" : {
                    "nickname" : "ivan",
                    "first_name" : "Ivan",
                    "last_name" : "Ivanov",
                    "image" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
                    "is_anonymous" : false
                  }
                }
              }
            }
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "GET",
            "uri" : "/api/v1/user/pages/58e2278a84092e61700041a7"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{\"meta\":{\"code\":200},\"data\":{\"id\":\"58e2278b84092e68020041aa\",\"short_id\":\"a\",\"title\":\"Payment page\",\"description\":\"Pay me please\",\"logo\":\"http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38\",\"amount\":100,\"payments_count\":0,\"is_active\":1,\"is_default\":1,\"updated_at\":\"2017\",\"created_at\":\"2017\",\"limits\":[{\"type\":\"count_max\",\"value\":5,\"current\":0,\"is_exceeded\":false},{\"type\":\"expires_at\",\"value\":2017.0,\"is_exceeded\":false}],\"card\":{\"id\":\"58e2278a84092e61700041a7\",\"number\":\"2860\"},\"user\":{\"nickname\":\"ivan\",\"first_name\":\"Ivan\",\"last_name\":\"Ivanov\",\"image\":\"http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38\",\"is_anonymous\":false}}}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Get current User Page1",
          "x-testDescription" : "Testcase for testing endpoint Get current User Page"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      },
      "put" : {
        "summary" : "Edit current User Page",
        "description" : "",
        "operationId" : "Edit current User Page",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Page ID, MongoID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EditCurrentUserPageRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/EditCurrentUserPageResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : {
                  "id" : "58e2278b84092e68020041aa",
                  "short_id" : "a",
                  "title" : "Payment page",
                  "description" : "Pay me please",
                  "logo" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
                  "amount" : 100,
                  "payments_count" : 0,
                  "is_active" : 1,
                  "is_default" : 1,
                  "updated_at" : "2017",
                  "created_at" : "2017",
                  "limits" : [ {
                    "type" : "count_max",
                    "value" : 5,
                    "current" : 0,
                    "is_exceeded" : false
                  }, {
                    "type" : "expires_at",
                    "value" : 2017,
                    "is_exceeded" : false
                  } ],
                  "card" : {
                    "id" : "58e2278a84092e61700041a7",
                    "number" : "2860"
                  },
                  "user" : {
                    "nickname" : "ivan",
                    "first_name" : "Ivan",
                    "last_name" : "Ivanov",
                    "image" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
                    "is_anonymous" : false
                  }
                }
              }
            }
          },
          "401" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "PUT",
            "uri" : "/api/v1/user/pages/58e2278a84092e61700041a7",
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"card_id\": \"58e2278a84092e61700041a7\",  \"card_number\": \"4242000011112222\",  \"amount\": 1000,  \"title\": \"Death Star\",  \"description\": \"Crowdfunding Death Star\",  \"is_active\": true,  \"is_default\": true,  \"logo\": \"http://gravatar.com/avatar/default\",  \"limits\": {    \"count_max\": 100,    \"expires_at\": \"2016-08-25T13:20:50+0000\"  }}"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{\"meta\":{\"code\":200},\"data\":{\"id\":\"58e2278b84092e68020041aa\",\"short_id\":\"a\",\"title\":\"Payment page\",\"description\":\"Pay me please\",\"logo\":\"http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38\",\"amount\":100,\"payments_count\":0,\"is_active\":1,\"is_default\":1,\"updated_at\":\"2017\",\"created_at\":\"2017\",\"limits\":[{\"type\":\"count_max\",\"value\":5,\"current\":0,\"is_exceeded\":false},{\"type\":\"expires_at\",\"value\":2017.0,\"is_exceeded\":false}],\"card\":{\"id\":\"58e2278a84092e61700041a7\",\"number\":\"2860\"},\"user\":{\"nickname\":\"ivan\",\"first_name\":\"Ivan\",\"last_name\":\"Ivanov\",\"image\":\"http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38\",\"is_anonymous\":false}}}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Edit current User Page1",
          "x-testDescription" : "Testcase for testing endpoint Edit current User Page"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      },
      "delete" : {
        "summary" : "Delete current User Page",
        "description" : "",
        "operationId" : "Delete current User Page",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Page ID, MongoID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/DeleteCurrentUserPageResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : { }
              }
            }
          },
          "401" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "DELETE",
            "uri" : "/api/v1/user/pages/58e2278a84092e61700041a7"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": {}}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Delete current User Page1",
          "x-testDescription" : "Testcase for testing endpoint Delete current User Page"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/users/{nickname}/page" : {
      "get" : {
        "summary" : "Get default Page for User",
        "description" : "",
        "operationId" : "Get default Page for User",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nickname",
          "in" : "path",
          "description" : "User nickname",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/GetDefaultPageForUserResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : {
                  "id" : "58e2278b84092e68020041aa",
                  "short_id" : "a",
                  "title" : "Payment page",
                  "description" : "Pay me please",
                  "logo" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
                  "amount" : 100,
                  "payments_count" : 0,
                  "is_active" : 1,
                  "is_default" : 1,
                  "updated_at" : "2017",
                  "created_at" : "2017",
                  "limits" : [ {
                    "type" : "count_max",
                    "value" : 5,
                    "current" : 0,
                    "is_exceeded" : false
                  }, {
                    "type" : "expires_at",
                    "value" : 2017,
                    "is_exceeded" : false
                  } ],
                  "card" : {
                    "id" : "58e2278a84092e61700041a7",
                    "number" : "2860"
                  },
                  "user" : {
                    "nickname" : "ivan",
                    "first_name" : "Ivan",
                    "last_name" : "Ivanov",
                    "image" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
                    "is_anonymous" : false
                  }
                }
              }
            }
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "GET",
            "uri" : "/api/v1/users/palpatine/page"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{\"meta\":{\"code\":200},\"data\":{\"id\":\"58e2278b84092e68020041aa\",\"short_id\":\"a\",\"title\":\"Payment page\",\"description\":\"Pay me please\",\"logo\":\"http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38\",\"amount\":100,\"payments_count\":0,\"is_active\":1,\"is_default\":1,\"updated_at\":\"2017\",\"created_at\":\"2017\",\"limits\":[{\"type\":\"count_max\",\"value\":5,\"current\":0,\"is_exceeded\":false},{\"type\":\"expires_at\",\"value\":2017.0,\"is_exceeded\":false}],\"card\":{\"id\":\"58e2278a84092e61700041a7\",\"number\":\"2860\"},\"user\":{\"nickname\":\"ivan\",\"first_name\":\"Ivan\",\"last_name\":\"Ivanov\",\"image\":\"http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38\",\"is_anonymous\":false}}}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Get default Page for User1",
          "x-testDescription" : "Testcase for testing endpoint Get default Page for User"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/user/pages/{id}/invoice" : {
      "post" : {
        "summary" : "Send Invoice",
        "description" : "Send to specified email invoice and link to Page.",
        "operationId" : "Send Invoice",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Page ID, MongoID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/SendInvoiceResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : { }
              }
            }
          },
          "401" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "POST",
            "uri" : "/api/v1/user/pages/58e2278a84092e61700041a7/invoice"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": {}}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Send Invoice1",
          "x-testDescription" : "Send to specified email invoice and link to Page."
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/merchants/count" : {
      "get" : {
        "summary" : "Get Users count",
        "description" : "Returns count of unique and active merchants.",
        "operationId" : "Get Users count",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/GetUsersCountResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : {
                  "count" : 100500
                }
              }
            }
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "GET",
            "uri" : "/api/v1/merchants/count"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": {    \"count\": 100500  }}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Get Users count1",
          "x-testDescription" : "Returns count of unique and active merchants."
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/user/webhooks" : {
      "get" : {
        "summary" : "Get current User Webhooks",
        "description" : "Webhook will be requested by POST with any change in the status of the payment. If there are several hooks, all points will be requested. The maximum number of webhooks is 5.\nThe fields which will be transfered:\nThe client should self-shuffle in the same sequence of fields and make sure that the hashes equals. This ensures that the data has not been changed during the transfer.\nTODO: replace this with JSON or table (preferred).\n+ `hash`: check SHA1 hash from fields in the following sequence: `page_id`, `payment_id`, `user_id`, `amount`, `fee`, `card_sender`, `card_recipient`, `email_recipient`, `external_id`, `id`\n+ `id`: is the id of the webhook. Returned when creating or modifying a Webhook\n+ `status`: the payment status. Possible: processed | Failed\n+ `page_id`: string, page identifier\n+ `payment_id`: a string, a payment ID\n+ `amount`: amount of payment\n+ `fee`: the number, amount of commission\n+ `description`: purpose of payment\n+ `card_recipient`: destination card in the format `000000 ****** 0000`\n+ `card_sender`: the sender's card in the format `000000 ****** 0000`\n+ `email_recipient`: recipient's email\n+ `created_at`: payment creation date\n+ `email_sender`: optional, email from the sender\n+ `external_id`: optional, the identifier that was sent by the client when creating the payment",
        "operationId" : "Get current User Webhooks",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/GetCurrentUserWebhooksResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : [ {
                  "id" : "58e22e0b84092e62700041a9",
                  "url" : "http://example.com"
                } ]
              }
            }
          },
          "401" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "GET",
            "uri" : "/api/v1/user/webhooks"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": [    {      \"id\": \"58e22e0b84092e62700041a9\",      \"url\": \"http://example.com\"    }  ]}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Get current User Webhooks1",
          "x-testDescription" : "Webhook will be requested by POST with any change in the status of the payment. If there are several hooks, all points will be requested. The maximum number of webhooks is 5.\nThe fields which will be transfered:\nThe client should self-shuffle in the same sequence of fields and make sure that the hashes equals. This ensures that the data has not been changed during the transfer.\nTODO: replace this with JSON or table (preferred).\n+ `hash`: check SHA1 hash from fields in the following sequence: `page_id`, `payment_id`, `user_id`, `amount`, `fee`, `card_sender`, `card_recipient`, `email_recipient`, `external_id`, `id`\n+ `id`: is the id of the webhook. Returned when creating or modifying a Webhook\n+ `status`: the payment status. Possible: processed | Failed\n+ `page_id`: string, page identifier\n+ `payment_id`: a string, a payment ID\n+ `amount`: amount of payment\n+ `fee`: the number, amount of commission\n+ `description`: purpose of payment\n+ `card_recipient`: destination card in the format `000000 ****** 0000`\n+ `card_sender`: the sender's card in the format `000000 ****** 0000`\n+ `email_recipient`: recipient's email\n+ `created_at`: payment creation date\n+ `email_sender`: optional, email from the sender\n+ `external_id`: optional, the identifier that was sent by the client when creating the payment"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      },
      "post" : {
        "summary" : "Create new Webhook",
        "description" : "Webhook will be requested by POST with any change in the status of the payment. If there are several hooks, all points will be requested. The maximum number of webhooks is 5.\nThe fields which will be transfered:\nThe client should self-shuffle in the same sequence of fields and make sure that the hashes equals. This ensures that the data has not been changed during the transfer.\nTODO: replace this with JSON or table (preferred).\n+ `hash`: check SHA1 hash from fields in the following sequence: `page_id`, `payment_id`, `user_id`, `amount`, `fee`, `card_sender`, `card_recipient`, `email_recipient`, `external_id`, `id`\n+ `id`: is the id of the webhook. Returned when creating or modifying a Webhook\n+ `status`: the payment status. Possible: processed | Failed\n+ `page_id`: string, page identifier\n+ `payment_id`: a string, a payment ID\n+ `amount`: amount of payment\n+ `fee`: the number, amount of commission\n+ `description`: purpose of payment\n+ `card_recipient`: destination card in the format `000000 ****** 0000`\n+ `card_sender`: the sender's card in the format `000000 ****** 0000`\n+ `email_recipient`: recipient's email\n+ `created_at`: payment creation date\n+ `email_sender`: optional, email from the sender\n+ `external_id`: optional, the identifier that was sent by the client when creating the payment",
        "operationId" : "Create new Webhook",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateNewWebhookRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/CreateNewWebhookResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : {
                  "id" : "58e22e0b84092e62700041a9",
                  "url" : "http://example.com"
                }
              }
            }
          },
          "401" : {
            "description" : ""
          },
          "422" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "POST",
            "uri" : "/api/v1/user/webhooks",
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"url\": \"http:://example.com/mbill_webhook\"}"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": {    \"id\": \"58e22e0b84092e62700041a9\",    \"url\": \"http://example.com\"  }}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Create new Webhook1",
          "x-testDescription" : "Webhook will be requested by POST with any change in the status of the payment. If there are several hooks, all points will be requested. The maximum number of webhooks is 5.\nThe fields which will be transfered:\nThe client should self-shuffle in the same sequence of fields and make sure that the hashes equals. This ensures that the data has not been changed during the transfer.\nTODO: replace this with JSON or table (preferred).\n+ `hash`: check SHA1 hash from fields in the following sequence: `page_id`, `payment_id`, `user_id`, `amount`, `fee`, `card_sender`, `card_recipient`, `email_recipient`, `external_id`, `id`\n+ `id`: is the id of the webhook. Returned when creating or modifying a Webhook\n+ `status`: the payment status. Possible: processed | Failed\n+ `page_id`: string, page identifier\n+ `payment_id`: a string, a payment ID\n+ `amount`: amount of payment\n+ `fee`: the number, amount of commission\n+ `description`: purpose of payment\n+ `card_recipient`: destination card in the format `000000 ****** 0000`\n+ `card_sender`: the sender's card in the format `000000 ****** 0000`\n+ `email_recipient`: recipient's email\n+ `created_at`: payment creation date\n+ `email_sender`: optional, email from the sender\n+ `external_id`: optional, the identifier that was sent by the client when creating the payment"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/user/webhooks/{id}" : {
      "put" : {
        "summary" : "Modify Webhook",
        "description" : "Webhook will be requested by POST with any change in the status of the payment. If there are several hooks, all points will be requested. The maximum number of webhooks is 5.\nThe fields which will be transfered:\nThe client should self-shuffle in the same sequence of fields and make sure that the hashes equals. This ensures that the data has not been changed during the transfer.\nTODO: replace this with JSON or table (preferred).\n+ `hash`: check SHA1 hash from fields in the following sequence: `page_id`, `payment_id`, `user_id`, `amount`, `fee`, `card_sender`, `card_recipient`, `email_recipient`, `external_id`, `id`\n+ `id`: is the id of the webhook. Returned when creating or modifying a Webhook\n+ `status`: the payment status. Possible: processed | Failed\n+ `page_id`: string, page identifier\n+ `payment_id`: a string, a payment ID\n+ `amount`: amount of payment\n+ `fee`: the number, amount of commission\n+ `description`: purpose of payment\n+ `card_recipient`: destination card in the format `000000 ****** 0000`\n+ `card_sender`: the sender's card in the format `000000 ****** 0000`\n+ `email_recipient`: recipient's email\n+ `created_at`: payment creation date\n+ `email_sender`: optional, email from the sender\n+ `external_id`: optional, the identifier that was sent by the client when creating the payment",
        "operationId" : "Modify Webhook",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Webhook ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModifyWebhookRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/ModifyWebhookResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : {
                  "id" : "58e22e0b84092e62700041a9",
                  "url" : "http://example.com"
                }
              }
            }
          },
          "401" : {
            "description" : ""
          },
          "422" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "PUT",
            "uri" : "/api/v1/user/webhooks/58e2278a84092e61700041a7",
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"url\": \"http:://example.com/mbill_webhook\"}"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": {    \"id\": \"58e22e0b84092e62700041a9\",    \"url\": \"http://example.com\"  }}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Modify Webhook1",
          "x-testDescription" : "Webhook will be requested by POST with any change in the status of the payment. If there are several hooks, all points will be requested. The maximum number of webhooks is 5.\nThe fields which will be transfered:\nThe client should self-shuffle in the same sequence of fields and make sure that the hashes equals. This ensures that the data has not been changed during the transfer.\nTODO: replace this with JSON or table (preferred).\n+ `hash`: check SHA1 hash from fields in the following sequence: `page_id`, `payment_id`, `user_id`, `amount`, `fee`, `card_sender`, `card_recipient`, `email_recipient`, `external_id`, `id`\n+ `id`: is the id of the webhook. Returned when creating or modifying a Webhook\n+ `status`: the payment status. Possible: processed | Failed\n+ `page_id`: string, page identifier\n+ `payment_id`: a string, a payment ID\n+ `amount`: amount of payment\n+ `fee`: the number, amount of commission\n+ `description`: purpose of payment\n+ `card_recipient`: destination card in the format `000000 ****** 0000`\n+ `card_sender`: the sender's card in the format `000000 ****** 0000`\n+ `email_recipient`: recipient's email\n+ `created_at`: payment creation date\n+ `email_sender`: optional, email from the sender\n+ `external_id`: optional, the identifier that was sent by the client when creating the payment"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      },
      "delete" : {
        "summary" : "Delete Webhook",
        "description" : "Webhook will be requested by POST with any change in the status of the payment. If there are several hooks, all points will be requested. The maximum number of webhooks is 5.\nThe fields which will be transfered:\nThe client should self-shuffle in the same sequence of fields and make sure that the hashes equals. This ensures that the data has not been changed during the transfer.\nTODO: replace this with JSON or table (preferred).\n+ `hash`: check SHA1 hash from fields in the following sequence: `page_id`, `payment_id`, `user_id`, `amount`, `fee`, `card_sender`, `card_recipient`, `email_recipient`, `external_id`, `id`\n+ `id`: is the id of the webhook. Returned when creating or modifying a Webhook\n+ `status`: the payment status. Possible: processed | Failed\n+ `page_id`: string, page identifier\n+ `payment_id`: a string, a payment ID\n+ `amount`: amount of payment\n+ `fee`: the number, amount of commission\n+ `description`: purpose of payment\n+ `card_recipient`: destination card in the format `000000 ****** 0000`\n+ `card_sender`: the sender's card in the format `000000 ****** 0000`\n+ `email_recipient`: recipient's email\n+ `created_at`: payment creation date\n+ `email_sender`: optional, email from the sender\n+ `external_id`: optional, the identifier that was sent by the client when creating the payment",
        "operationId" : "Delete Webhook",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Webhook ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/DeleteWebhookResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : { }
              }
            }
          },
          "401" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "DELETE",
            "uri" : "/api/v1/user/webhooks/58e2278a84092e61700041a7"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": {}}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Delete Webhook1",
          "x-testDescription" : "Webhook will be requested by POST with any change in the status of the payment. If there are several hooks, all points will be requested. The maximum number of webhooks is 5.\nThe fields which will be transfered:\nThe client should self-shuffle in the same sequence of fields and make sure that the hashes equals. This ensures that the data has not been changed during the transfer.\nTODO: replace this with JSON or table (preferred).\n+ `hash`: check SHA1 hash from fields in the following sequence: `page_id`, `payment_id`, `user_id`, `amount`, `fee`, `card_sender`, `card_recipient`, `email_recipient`, `external_id`, `id`\n+ `id`: is the id of the webhook. Returned when creating or modifying a Webhook\n+ `status`: the payment status. Possible: processed | Failed\n+ `page_id`: string, page identifier\n+ `payment_id`: a string, a payment ID\n+ `amount`: amount of payment\n+ `fee`: the number, amount of commission\n+ `description`: purpose of payment\n+ `card_recipient`: destination card in the format `000000 ****** 0000`\n+ `card_sender`: the sender's card in the format `000000 ****** 0000`\n+ `email_recipient`: recipient's email\n+ `created_at`: payment creation date\n+ `email_sender`: optional, email from the sender\n+ `external_id`: optional, the identifier that was sent by the client when creating the payment"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/pages/{id}/pay" : {
      "post" : {
        "summary" : "Create",
        "description" : "Create payment by Page.id.\nIf an optional `email` parameter is passed, the sender will receive a notification about the transfer to the Email\n#### 3-D Secure card verification\nWhen card is required *3-D Secure* verification, response will contain field (object) `auth` with the following fields:\n+ `acs_url` - redirect url for *3-D Secure* verification\n+ `pa_req` - payment authentication request\n+ `terminal_url` - redirect URL after the customer has authenticated themselves\n+ `md` - unique payment ID",
        "operationId" : "Create",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Payment ID, MongoID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/CreateResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : {
                  "id" : "58e4edf0a60ad664340041a8",
                  "external_id" : "3f5cb2ad",
                  "amount" : 100.5,
                  "fee" : 5.5,
                  "status" : "processed",
                  "decline_reason" : "",
                  "updated_at" : "2017-04-05T13:15:30+00:00",
                  "created_at" : "2017-04-05T13:15:28+00:00",
                  "sender" : {
                    "card_number" : "559158******53",
                    "email" : "lemelanov@example.net"
                  },
                  "recipient" : {
                    "card_number" : "557661******05",
                    "card_id" : "58e4edeea60ad6b5330041b0",
                    "email" : "elenberg@example.net",
                    "name" : "Zlatan"
                  },
                  "meta" : {
                    "some_client_key" : "some_client_data"
                  },
                  "transaction_id" : "14348",
                  "transaction_token" : "transfer-token-3f5cb2ad-298a-4e4d-a74a-fd6d594a4971",
                  "token" : "transfer-token-84d512f3-1b45-4de0-bc2a-da3bca526990",
                  "token_expires_at" : "2017-04-05T12:28:49.789572Z",
                  "auth" : {
                    "md" : "1491612487",
                    "acs_url" : "http://p2y-dev.mbill.co/pay2you-external/3ds",
                    "pa_req" : "somethingPaReq",
                    "terminal_url" : "http://p2y-dev.mbill.co/pay2you-external/3ds/input3d",
                    "type" : "3d-secure"
                  }
                }
              }
            }
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "POST",
            "uri" : "/api/v1/pages/58e2278a84092e61700041a7/pay",
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"sender\": {    \"credential\": {      \"token\": \"\"    },    \"email\": \"ivan@example.com\"  },  \"amount\": 199.99,  \"description\": \"Death Star investments\",  \"external_id\": \"66ea3306180\"}"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": {    \"id\": \"58e4edf0a60ad664340041a8\",    \"external_id\": \"3f5cb2ad\",    \"amount\": 100.5,    \"fee\": 5.5,    \"status\": \"processed\",    \"decline_reason\": \"\",    \"updated_at\": \"2017-04-05T13:15:30+0000\",    \"created_at\": \"2017-04-05T13:15:28+0000\",    \"sender\": {      \"card_number\": \"559158******53\",      \"email\": \"lemelanov@example.net\"    },    \"recipient\": {      \"card_number\": \"557661******05\",      \"card_id\": \"58e4edeea60ad6b5330041b0\",      \"email\": \"elenberg@example.net\",      \"name\": \"Zlatan\"    },    \"meta\": {      \"some_client_key\": \"some_client_data\"    },    \"transaction_id\": \"14348\",    \"transaction_token\": \"transfer-token-3f5cb2ad-298a-4e4d-a74a-fd6d594a4971\",    \"token\": \"transfer-token-84d512f3-1b45-4de0-bc2a-da3bca526990\",    \"token_expires_at\": \"2017-04-05T12:28:49.789572Z\",    \"auth\": {      \"md\": \"1491612487\",      \"acs_url\": \"http://p2y-dev.mbill.co/pay2you-external/3ds\",      \"pa_req\": \"somethingPaReq\",      \"terminal_url\": \"http://p2y-dev.mbill.co/pay2you-external/3ds/input3d\",      \"type\": \"3d-secure\"    }  }}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Create1",
          "x-testDescription" : "Create payment by Page.id.\nIf an optional `email` parameter is passed, the sender will receive a notification about the transfer to the Email\n#### 3-D Secure card verification\nWhen card is required *3-D Secure* verification, response will contain field (object) `auth` with the following fields:\n+ `acs_url` - redirect url for *3-D Secure* verification\n+ `pa_req` - payment authentication request\n+ `terminal_url` - redirect URL after the customer has authenticated themselves\n+ `md` - unique payment ID"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/payments/{id}/complete" : {
      "post" : {
        "summary" : "Complete",
        "description" : "Complete payment via Lookup code",
        "operationId" : "Complete",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Payment ID, MongoID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CompleteRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/CompleteResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : {
                  "id" : "58e4edf0a60ad664340041a8",
                  "external_id" : "3f5cb2ad",
                  "amount" : 100.5,
                  "fee" : 5.5,
                  "status" : "processed",
                  "decline_reason" : "",
                  "updated_at" : "2017-04-05T13:15:30+00:00",
                  "created_at" : "2017-04-05T13:15:28+00:00",
                  "sender" : {
                    "card_number" : "559158******53",
                    "email" : "lemelanov@example.net"
                  },
                  "recipient" : {
                    "card_number" : "557661******05",
                    "card_id" : "58e4edeea60ad6b5330041b0",
                    "email" : "elenberg@example.net",
                    "name" : "Zlatan"
                  },
                  "meta" : {
                    "some_client_key" : "some_client_data"
                  },
                  "transaction_id" : "14348",
                  "transaction_token" : "transfer-token-3f5cb2ad-298a-4e4d-a74a-fd6d594a4971"
                }
              }
            }
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "POST",
            "uri" : "/api/v1/payments/58e2278a84092e61700041a7/complete",
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"token\": \"transfer-token-84d512f3-1b45-4de0-bc2a-da3bca526990\",  \"code\": \"123345\"}"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": {    \"id\": \"58e4edf0a60ad664340041a8\",    \"external_id\": \"3f5cb2ad\",    \"amount\": 100.5,    \"fee\": 5.5,    \"status\": \"processed\",    \"decline_reason\": \"\",    \"updated_at\": \"2017-04-05T13:15:30+0000\",    \"created_at\": \"2017-04-05T13:15:28+0000\",    \"sender\": {      \"card_number\": \"559158******53\",      \"email\": \"lemelanov@example.net\"    },    \"recipient\": {      \"card_number\": \"557661******05\",      \"card_id\": \"58e4edeea60ad6b5330041b0\",      \"email\": \"elenberg@example.net\",      \"name\": \"Zlatan\"    },    \"meta\": {      \"some_client_key\": \"some_client_data\"    },    \"transaction_id\": \"14348\",    \"transaction_token\": \"transfer-token-3f5cb2ad-298a-4e4d-a74a-fd6d594a4971\"  }}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Complete1",
          "x-testDescription" : "Complete payment via Lookup code"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/pages/{id}/status" : {
      "get" : {
        "summary" : "Get Payment",
        "description" : "Used to get Payment status.",
        "operationId" : "Get Payment",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Payment ID, MongoID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/GetPaymentResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : {
                  "id" : "58e4edf0a60ad664340041a8",
                  "external_id" : "3f5cb2ad",
                  "amount" : 100.5,
                  "fee" : 5.5,
                  "status" : "processed",
                  "decline_reason" : "",
                  "updated_at" : "2017-04-05T13:15:30+00:00",
                  "created_at" : "2017-04-05T13:15:28+00:00",
                  "sender" : {
                    "card_number" : "559158******53",
                    "email" : "lemelanov@example.net"
                  },
                  "recipient" : {
                    "card_number" : "557661******05",
                    "card_id" : "58e4edeea60ad6b5330041b0",
                    "email" : "elenberg@example.net",
                    "name" : "Zlatan"
                  },
                  "meta" : {
                    "some_client_key" : "some_client_data"
                  },
                  "page" : {
                    "id" : "58e4edeea60ad6b5330041b1",
                    "title" : "Page title",
                    "description" : "Description of payment"
                  },
                  "transaction_id" : "14348",
                  "transaction_token" : "transfer-token-3f5cb2ad-298a-4e4d-a74a-fd6d594a4971"
                }
              }
            }
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "GET",
            "uri" : "/api/v1/pages/58e2278a84092e61700041a7/status"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": {    \"id\": \"58e4edf0a60ad664340041a8\",    \"external_id\": \"3f5cb2ad\",    \"amount\": 100.5,    \"fee\": 5.5,    \"status\": \"processed\",    \"decline_reason\": \"\",    \"updated_at\": \"2017-04-05T13:15:30+0000\",    \"created_at\": \"2017-04-05T13:15:28+0000\",    \"sender\": {      \"card_number\": \"559158******53\",      \"email\": \"lemelanov@example.net\"    },    \"recipient\": {      \"card_number\": \"557661******05\",      \"card_id\": \"58e4edeea60ad6b5330041b0\",      \"email\": \"elenberg@example.net\",      \"name\": \"Zlatan\"    },    \"meta\": {      \"some_client_key\": \"some_client_data\"    },    \"page\": {      \"id\": \"58e4edeea60ad6b5330041b1\",      \"title\": \"Page title\",      \"description\": \"Description of payment\"    },    \"transaction_id\": \"14348\",    \"transaction_token\": \"transfer-token-3f5cb2ad-298a-4e4d-a74a-fd6d594a4971\"  }}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Get Payment1",
          "x-testDescription" : "Used to get Payment status."
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/pages/{id}/email/resend" : {
      "get" : {
        "summary" : "Resend Receipt",
        "description" : "Resend Payment Receipt to sender Email.",
        "operationId" : "Resend Receipt",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Payment ID, MongoID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/ResendReceiptResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                }
              }
            }
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "GET",
            "uri" : "/api/v1/pages/58e2278a84092e61700041a7/email/resend"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  }}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "Resend Receipt1",
          "x-testDescription" : "Resend Payment Receipt to sender Email."
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    },
    "/api/v1/payments" : {
      "get" : {
        "summary" : "List or Search Payments",
        "description" : "",
        "operationId" : "List or Search Payments",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "sender_card_number_first",
          "in" : "query",
          "description" : "First 6 digits of Sender card number",
          "required" : true,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "sender_card_number_last",
          "in" : "query",
          "description" : "Last 2 digits of Sender card number",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "recipient_card_number_first",
          "in" : "query",
          "description" : "First 6 digits of Recipient card number",
          "required" : true,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "recipient_card_number_last",
          "in" : "query",
          "description" : "Last 2 digits of Recipient card number",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "external_id",
          "in" : "query",
          "description" : "client-id (string) - Client ID for payment",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "transaction_id",
          "in" : "query",
          "description" : "Page ID, MongoID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page_id",
          "in" : "query",
          "description" : "Page ID, MongoID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page_description",
          "in" : "query",
          "description" : "",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "amount_from",
          "in" : "query",
          "description" : "",
          "required" : true,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "amount_to",
          "in" : "query",
          "description" : "",
          "required" : true,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "date_from",
          "in" : "query",
          "description" : "10-12 (string)",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "date_to",
          "in" : "query",
          "description" : "01-01 (string)",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "amount of payment per page (default 10)",
          "required" : true,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "starting_after",
          "in" : "query",
          "description" : "for pagination, show payments after specified ID, MongoId",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "response type",
          "required" : false,
          "type" : "string",
          "enum" : [ "json", "csv", "xlsx" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/ListOrSearchPaymentsResponse"
            },
            "examples" : {
              "application/json" : {
                "meta" : {
                  "code" : 200
                },
                "data" : [ {
                  "id" : "58e4edf0a60ad664340041a8",
                  "external_id" : "3f5cb2ad",
                  "amount" : 100.5,
                  "fee" : 5.5,
                  "status" : "processed",
                  "decline_reason" : "",
                  "updated_at" : "2017-04-05T13:15:30+00:00",
                  "created_at" : "2017-04-05T13:15:28+00:00",
                  "sender" : {
                    "card_number" : "559158******53",
                    "email" : "lemelanov@example.net"
                  },
                  "recipient" : {
                    "card_number" : "557661******05",
                    "card_id" : "58e4edeea60ad6b5330041b0",
                    "email" : "elenberg@example.net",
                    "name" : "Zlatan"
                  },
                  "meta" : {
                    "some_client_key" : "some_client_data"
                  },
                  "page" : {
                    "id" : "58e4edeea60ad6b5330041b1",
                    "title" : "Page title",
                    "description" : "Description of payment"
                  },
                  "transaction_id" : "14348"
                } ],
                "paginate" : {
                  "limit" : 20,
                  "starting_after" : "56c31536a60ad644060041af",
                  "ending_before" : "58e5f1dfa60ad6b5330041b3",
                  "count" : 1000
                }
              }
            }
          },
          "401" : {
            "description" : ""
          }
        },
        "x-unitTests" : [ {
          "request" : {
            "method" : "GET",
            "uri" : "/api/v1/payments?type=json&sender_card_number_first=421123&sender_card_number_last=00&recipient_card_number_first=431423&recipient_card_number_last=02&external_id=some&transaction_id=58e5f1f0a60ad602340041aa&page_id=58e5f1f0a60ad602340041aa&page_description=Tesla Model X&amount_from=1.01&amount_to=100.00&date_from=2016&date_to=2017&limit=10&starting_after=10"
          },
          "expectedResponse" : {
            "x-allowExtraHeaders" : true,
            "x-bodyMatchMode" : "RAW",
            "x-arrayOrderedMatching" : false,
            "x-arrayCheckCount" : false,
            "x-matchResponseSchema" : true,
            "headers" : {
              "Content-Type" : "application/json"
            },
            "body" : "{  \"meta\": {    \"code\": 200  },  \"data\": [    {      \"id\": \"58e4edf0a60ad664340041a8\",      \"external_id\": \"3f5cb2ad\",      \"amount\": 100.5,      \"fee\": 5.5,      \"status\": \"processed\",      \"decline_reason\": \"\",      \"updated_at\": \"2017-04-05T13:15:30+0000\",      \"created_at\": \"2017-04-05T13:15:28+0000\",      \"sender\": {        \"card_number\": \"559158******53\",        \"email\": \"lemelanov@example.net\"      },      \"recipient\": {        \"card_number\": \"557661******05\",        \"card_id\": \"58e4edeea60ad6b5330041b0\",        \"email\": \"elenberg@example.net\",        \"name\": \"Zlatan\"      },      \"meta\": {        \"some_client_key\": \"some_client_data\"      },      \"page\": {        \"id\": \"58e4edeea60ad6b5330041b1\",        \"title\": \"Page title\",        \"description\": \"Description of payment\"      },      \"transaction_id\": \"14348\"    }  ],  \"paginate\": {    \"limit\": 20,    \"starting_after\": \"56c31536a60ad644060041af\",    \"ending_before\": \"58e5f1dfa60ad6b5330041b3\",    \"count\": 1000  }}"
          },
          "x-testShouldPass" : true,
          "x-testEnabled" : true,
          "x-testName" : "List or Search Payments1",
          "x-testDescription" : "Testcase for testing endpoint List or Search Payments"
        } ],
        "x-operation-settings" : {
          "CollectParameters" : false,
          "AllowDynamicQueryParameters" : false,
          "AllowDynamicFormParameters" : false,
          "IsMultiContentStreaming" : false
        }
      }
    }
  },
  "definitions" : {
    "User" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "56c31536a60ad644060041af",
          "description" : "MongoID"
        },
        "first_name" : {
          "type" : "string",
          "example" : "Иван",
          "description" : "User first name"
        },
        "last_name" : {
          "type" : "string",
          "example" : "Петров",
          "description" : "User last name"
        },
        "nickname" : {
          "type" : "string",
          "example" : "vane4ka",
          "description" : "Nickname пользователя"
        },
        "email" : {
          "type" : "string",
          "example" : "test@example.com",
          "description" : "User email"
        },
        "temporary_email" : {
          "type" : "string",
          "example" : "test2@example.com",
          "description" : "User temporary email (email doesn't verified)"
        },
        "phone" : {
          "type" : "string",
          "example" : "+3809876543321",
          "description" : "User phone"
        },
        "temporary_phone" : {
          "type" : "string",
          "example" : "+3809876543321",
          "description" : "User temporary phone (phone doensn't verified)"
        },
        "image" : {
          "type" : "string",
          "example" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
          "description" : "User avatar"
        },
        "locale" : {
          "type" : "string",
          "example" : "ru_RU",
          "description" : "User locale"
        },
        "timezone" : {
          "type" : "string",
          "example" : "UTC",
          "description" : "User timezone"
        },
        "email_send_frequency" : {
          "$ref" : "#/definitions/EmailSendFrequency"
        },
        "active" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Is user active"
        },
        "is_blocked" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Is user blocked"
        },
        "pages" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "$ref" : "#/definitions/PageShort"
          }
        },
        "cards" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "$ref" : "#/definitions/CardShort"
          }
        },
        "webhooks" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "$ref" : "#/definitions/Webhook"
          }
        },
        "social_profiles" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "$ref" : "#/definitions/SocialProfile"
          }
        },
        "intercom_user_hash" : {
          "type" : "string",
          "example" : "b6b3e7678af345a7178433a0016aa7b718a94fabc92122a6a37b9dbdae7196a4",
          "description" : "User hash for intercom"
        }
      },
      "title" : "User"
    },
    "EmailSendFrequency" : {
      "type" : "string",
      "title" : "email_send_frequency",
      "example" : "never",
      "enum" : [ "never", "daily", "monthly" ]
    },
    "PageShort" : {
      "title" : "PageShort",
      "allOf" : [ {
        "$ref" : "#/definitions/Page"
      }, {
        "type" : "object",
        "properties" : {
          "card_id" : {
            "type" : "string",
            "example" : "58e2278a84092e61700041a7",
            "description" : "Card ID, MongoID"
          }
        }
      } ]
    },
    "Page" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "58e2278b84092e68020041aa",
          "description" : "MongoID"
        },
        "short_id" : {
          "type" : "string",
          "example" : "a",
          "description" : "Short page id"
        },
        "title" : {
          "type" : "string",
          "example" : "Payment page",
          "description" : "Page title"
        },
        "description" : {
          "type" : "string",
          "example" : "Pay me please",
          "description" : "Page description"
        },
        "logo" : {
          "type" : "string",
          "example" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
          "description" : "Link for page logo"
        },
        "amount" : {
          "type" : "number",
          "format" : "double",
          "example" : 100.0,
          "description" : "Page amount"
        },
        "payments_count" : {
          "type" : "number",
          "format" : "double",
          "example" : 0.0,
          "description" : "Count of payments at the current page"
        },
        "is_active" : {
          "type" : "number",
          "format" : "double",
          "example" : 1.0,
          "description" : "is the page active"
        },
        "is_default" : {
          "type" : "number",
          "format" : "double",
          "example" : 1.0,
          "description" : "is the page default for current user"
        },
        "updated_at" : {
          "type" : "string",
          "example" : "2017",
          "description" : "04-03T19:44:27+09:00 (date) - Page was updated at"
        },
        "created_at" : {
          "type" : "string",
          "example" : "2017",
          "description" : "04-03T19:44:27+09:00 (date) - Page was created at"
        },
        "limits" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "$ref" : "#/definitions/Limits"
          }
        }
      },
      "title" : "Page"
    },
    "Limits" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "count_max",
          "description" : "type Of limit (max payments count)"
        },
        "value" : {
          "type" : "number",
          "format" : "double",
          "example" : 5.0,
          "description" : "value of max payments count"
        },
        "current" : {
          "type" : "number",
          "format" : "double",
          "example" : 0.0,
          "description" : "current payments count"
        },
        "is_exceeded" : {
          "type" : "boolean",
          "example" : false,
          "description" : "is the limit exceeded"
        }
      },
      "title" : "limits"
    },
    "CardShort" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "58e2278a84092e61700041a7",
          "description" : "MongoId"
        },
        "number" : {
          "type" : "string",
          "example" : "5237********1358",
          "description" : "card number with hidden data"
        },
        "active" : {
          "type" : "boolean",
          "example" : true,
          "description" : "is the card active"
        },
        "turnover" : {
          "type" : "number",
          "format" : "double",
          "example" : 0.0,
          "description" : "card's turnover"
        }
      },
      "title" : "CardShort"
    },
    "Webhook" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "58e22e0b84092e62700041a9",
          "description" : "MongoId"
        },
        "url" : {
          "type" : "string",
          "example" : "http://example.com",
          "description" : "Webhook Link"
        }
      },
      "title" : "Webhook"
    },
    "SocialProfile" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "58e22f0984092e62700041b3",
          "description" : "MongoId"
        },
        "user_id" : {
          "type" : "string",
          "example" : "56c31536a60ad644060041af",
          "description" : "User Id"
        },
        "type" : {
          "$ref" : "#/definitions/Type"
        },
        "first_name" : {
          "type" : "string",
          "example" : "Ivan",
          "description" : "User first name from current social profile"
        },
        "last_name" : {
          "type" : "string",
          "example" : "Ivanov",
          "description" : "User last name from current social profile"
        },
        "avatar_url" : {
          "type" : "string",
          "example" : "http://www.gravatar.com/avatar/dummy",
          "description" : "Link to avatar for current social profile"
        }
      },
      "title" : "SocialProfile"
    },
    "Type" : {
      "type" : "string",
      "title" : "type",
      "example" : "facebook",
      "enum" : [ "facebook", "google", "vkontakte" ]
    },
    "PageFull" : {
      "title" : "PageFull",
      "allOf" : [ {
        "$ref" : "#/definitions/Page"
      }, {
        "type" : "object",
        "properties" : {
          "card" : {
            "$ref" : "#/definitions/Card"
          },
          "user" : {
            "$ref" : "#/definitions/User11"
          }
        }
      } ]
    },
    "Card" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "58e2278a84092e61700041a7",
          "description" : "Card ID, MongoID"
        },
        "number" : {
          "type" : "string",
          "example" : "2860",
          "description" : "Last 4 digits of card number"
        }
      },
      "title" : "card"
    },
    "User11" : {
      "type" : "object",
      "properties" : {
        "nickname" : {
          "type" : "string",
          "example" : "ivan",
          "description" : "User nickname"
        },
        "first_name" : {
          "type" : "string",
          "example" : "Ivan",
          "description" : "User first name"
        },
        "last_name" : {
          "type" : "string",
          "example" : "Ivanov",
          "description" : "User last name"
        },
        "image" : {
          "type" : "string",
          "example" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
          "description" : "Link for page logo"
        },
        "is_anonymous" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Checker if user is anonymous"
        }
      },
      "title" : "user11"
    },
    "PageFullDtek" : {
      "title" : "PageFullDtek",
      "allOf" : [ {
        "$ref" : "#/definitions/Page"
      }, {
        "type" : "object",
        "required" : [ "account_number", "res_id: DTEK_001", "sender_name" ],
        "properties" : {
          "account_number" : {
            "type" : "string",
            "example" : "30043223443",
            "description" : "Clients account number."
          },
          "res_id: DTEK_001" : {
            "type" : "string",
            "description" : "each RES will have it's own merchant_id."
          },
          "sender_name" : {
            "type" : "string",
            "example" : "Іванов Іван Іванович",
            "description" : "customer name"
          },
          "sender_email" : {
            "type" : "string",
            "example" : "ivanov@mail.com",
            "description" : "customer email"
          },
          "sender_phone" : {
            "type" : "string",
            "example" : "+380971111111",
            "description" : "customer phone number"
          }
        }
      } ]
    },
    "DtekSender" : {
      "type" : "object",
      "required" : [ "account_number", "name" ],
      "properties" : {
        "account_number" : {
          "type" : "string",
          "example" : "30043223443",
          "description" : "Clients account number."
        },
        "name" : {
          "type" : "string",
          "example" : "Іванов Іван Іванович",
          "description" : "customer name"
        },
        "email" : {
          "type" : "string",
          "example" : "ivanov@mail.com",
          "description" : "customer email"
        },
        "phone" : {
          "type" : "string",
          "example" : "+380971111111",
          "description" : "customer phone number"
        },
        "address" : {
          "$ref" : "#/definitions/Address"
        }
      },
      "title" : "DtekSender"
    },
    "Address" : {
      "type" : "object",
      "required" : [ "building" ],
      "properties" : {
        "building" : {
          "type" : "string",
          "example" : "15",
          "description" : ""
        },
        "area" : {
          "type" : "string",
          "example" : "Житомирська",
          "description" : ""
        },
        "region" : {
          "type" : "string",
          "example" : "Бердичівський",
          "description" : ""
        },
        "settlement" : {
          "type" : "string",
          "example" : "Київ",
          "description" : ""
        },
        "settlement_type" : {
          "type" : "string",
          "example" : "CITY",
          "description" : "`Dictionary SETTLEMENT_TYPE`"
        },
        "street_type" : {
          "type" : "string",
          "example" : "STREET",
          "description" : "`Dictionary STREET_TYPE`"
        },
        "street" : {
          "type" : "string",
          "example" : "Ніжинська",
          "description" : ""
        },
        "apartment" : {
          "type" : "string",
          "example" : "23",
          "description" : ""
        },
        "zip" : {
          "type" : "string",
          "example" : "2090.0",
          "description" : ""
        }
      },
      "title" : "Address"
    },
    "Payment" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "58e4edf0a60ad664340041a8",
          "description" : "Payment ID, MongoId"
        },
        "external_id" : {
          "type" : "string",
          "example" : "3f5cb2ad",
          "description" : "Client external key"
        },
        "amount" : {
          "type" : "number",
          "format" : "double",
          "example" : 100.5,
          "description" : ""
        },
        "fee" : {
          "type" : "number",
          "format" : "double",
          "example" : 5.5,
          "description" : ""
        },
        "status" : {
          "type" : "string",
          "example" : "processed",
          "description" : ""
        },
        "decline_reason" : {
          "type" : "string",
          "description" : ""
        },
        "updated_at" : {
          "type" : "string",
          "example" : "4/5/2017 1:15:30 PM",
          "description" : ""
        },
        "created_at" : {
          "type" : "string",
          "example" : "4/5/2017 1:15:28 PM",
          "description" : ""
        },
        "sender" : {
          "$ref" : "#/definitions/Sender"
        },
        "recipient" : {
          "$ref" : "#/definitions/Recipient"
        },
        "meta" : {
          "$ref" : "#/definitions/Meta"
        }
      },
      "title" : "Payment"
    },
    "Sender" : {
      "type" : "object",
      "properties" : {
        "card_number" : {
          "type" : "string",
          "example" : "559158******53",
          "description" : ""
        },
        "email" : {
          "type" : "string",
          "example" : "lemelanov@example.net",
          "description" : ""
        }
      },
      "title" : "sender"
    },
    "Recipient" : {
      "type" : "object",
      "properties" : {
        "card_number" : {
          "type" : "string",
          "example" : "557661******05",
          "description" : ""
        },
        "card_id" : {
          "type" : "string",
          "example" : "58e4edeea60ad6b5330041b0",
          "description" : ""
        },
        "email" : {
          "type" : "string",
          "example" : "elenberg@example.net",
          "description" : ""
        },
        "name" : {
          "type" : "string",
          "example" : "Zlatan",
          "description" : ""
        }
      },
      "title" : "recipient"
    },
    "Meta" : {
      "type" : "object",
      "properties" : {
        "some_client_key" : {
          "type" : "string",
          "example" : "some_client_data",
          "description" : ""
        }
      },
      "title" : "meta"
    },
    "PaymentComplete" : {
      "title" : "PaymentComplete",
      "allOf" : [ {
        "$ref" : "#/definitions/Payment"
      }, {
        "type" : "object",
        "properties" : {
          "transaction_id" : {
            "type" : "string",
            "example" : "14348",
            "description" : "Transaction ID"
          },
          "transaction_token" : {
            "type" : "string",
            "example" : "transfer-token-3f5cb2ad-298a-4e4d-a74a-fd6d594a4971",
            "description" : ""
          }
        }
      } ]
    },
    "PaymentPay3dSecure" : {
      "title" : "PaymentPay3dSecure",
      "allOf" : [ {
        "$ref" : "#/definitions/PaymentComplete"
      }, {
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string",
            "example" : "transfer-token-84d512f3-1b45-4de0-bc2a-da3bca526990",
            "description" : "Payment token from Tokenizer"
          },
          "token_expires_at" : {
            "type" : "string",
            "example" : "4/5/2017 12:28:49 PM",
            "description" : "Token expiration datetime"
          },
          "auth" : {
            "$ref" : "#/definitions/Auth"
          }
        }
      } ]
    },
    "Auth" : {
      "type" : "object",
      "properties" : {
        "md" : {
          "type" : "string",
          "example" : "1491612487",
          "description" : "unique payment ID"
        },
        "acs_url" : {
          "type" : "string",
          "example" : "http://p2y-dev.mbill.co/pay2you-external/3ds",
          "description" : "redirect url for *3-D Secure* verification"
        },
        "pa_req" : {
          "type" : "string",
          "example" : "somethingPaReq",
          "description" : "payment authentication request"
        },
        "terminal_url" : {
          "type" : "string",
          "example" : "http://p2y-dev.mbill.co/pay2you-external/3ds/input3d",
          "description" : ""
        },
        "type" : {
          "type" : "string",
          "example" : "3d-secure",
          "description" : "card verification type"
        }
      },
      "title" : "auth"
    },
    "PaymentHistory" : {
      "title" : "PaymentHistory",
      "allOf" : [ {
        "$ref" : "#/definitions/Payment"
      }, {
        "type" : "object",
        "properties" : {
          "page" : {
            "$ref" : "#/definitions/Page23"
          },
          "transaction_id" : {
            "type" : "string",
            "example" : "14348",
            "description" : "Transaction ID"
          }
        }
      } ]
    },
    "Page23" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "58e4edeea60ad6b5330041b1",
          "description" : ""
        },
        "title" : {
          "type" : "string",
          "example" : "Page title",
          "description" : ""
        },
        "description" : {
          "type" : "string",
          "example" : "Description of payment",
          "description" : ""
        }
      },
      "title" : "page23"
    },
    "PaymentStatus" : {
      "title" : "PaymentStatus",
      "allOf" : [ {
        "$ref" : "#/definitions/PaymentHistory"
      }, {
        "type" : "object",
        "properties" : {
          "transaction_token" : {
            "type" : "string",
            "example" : "transfer-token-3f5cb2ad-298a-4e4d-a74a-fd6d594a4971",
            "description" : ""
          }
        }
      } ]
    },
    "DevTokenEmail" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string",
          "example" : "$2y$10$vWmVfDnPPOn4pC5MFEPiP.DkQRtFCqqq0k7V3v8qognX89AarWe",
          "description" : "Token for email verification"
        },
        "expired" : {
          "type" : "number",
          "format" : "double",
          "example" : 1.491217485E9,
          "description" : "Token will be expired at time"
        }
      },
      "title" : "DevTokenEmail"
    },
    "DevTokenPhone" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "number",
          "format" : "double",
          "example" : 774277.0,
          "description" : "Token for phone verification"
        },
        "expired" : {
          "type" : "number",
          "format" : "double",
          "example" : 1.491217485E9,
          "description" : "Token will be expired at time"
        }
      },
      "title" : "DevTokenPhone"
    },
    "AccessToken" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "$ref" : "#/definitions/Token"
        }
      },
      "title" : "AccessToken"
    },
    "Token" : {
      "type" : "object",
      "properties" : {
        "token_type" : {
          "type" : "string",
          "example" : "bearer",
          "description" : "Access token type for the feature requests"
        },
        "access_token" : {
          "type" : "string",
          "example" : "b04792ffd43765d0a7f26ffc802c51744190d5c5",
          "description" : "Access token for the feature requests"
        }
      },
      "title" : "token"
    },
    "ResponseError" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta30"
        }
      },
      "title" : "Response_Error"
    },
    "Meta30" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "number",
          "format" : "double",
          "example" : 400.0,
          "description" : ""
        },
        "error" : {
          "type" : "string",
          "example" : "\"something_went_wrong\"",
          "description" : ""
        }
      },
      "title" : "meta30"
    },
    "ResponseErrorUnauthorized" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta30"
        }
      },
      "title" : "Response_Error_Unauthorized"
    },
    "ResponseErrorValidationfailed" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta34"
        }
      },
      "title" : "Response_Error_ValidationFailed"
    },
    "Meta34" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "number",
          "format" : "double",
          "example" : 422.0,
          "description" : ""
        },
        "error" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "type" : "string"
          }
        }
      },
      "title" : "meta34"
    },
    "ResponsePagination" : {
      "type" : "object",
      "properties" : {
        "limit" : {
          "type" : "number",
          "format" : "double",
          "example" : 20.0,
          "description" : "A limit on the number of objects to be returned, between 1 and 100. Default: 50."
        },
        "starting_after" : {
          "type" : "string",
          "example" : "56c31536a60ad644060041af",
          "description" : "A cursor for use in pagination. An object ID that defines your position in the list. For example, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."
        },
        "ending_before" : {
          "type" : "string",
          "example" : "58e5f1dfa60ad6b5330041b3",
          "description" : "A cursor for use in pagination to fetch the previous page of the list. Equals to specified parameter *starting_after*."
        },
        "count" : {
          "type" : "number",
          "format" : "double",
          "example" : 1000.0,
          "description" : "Total number of objects in collection."
        }
      },
      "title" : "Response_Pagination"
    },
    "SignUp via email and/or password request" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string",
          "example" : "test@example.com",
          "description" : ""
        },
        "password" : {
          "type" : "string",
          "example" : "p@s$w0rd",
          "description" : ""
        },
        "first_name" : {
          "type" : "string",
          "example" : "Ivan",
          "description" : ""
        },
        "last_name" : {
          "type" : "string",
          "example" : "Ivanov",
          "description" : ""
        },
        "nickname" : {
          "type" : "string",
          "example" : "vane4ka",
          "description" : ""
        },
        "title" : {
          "type" : "string",
          "example" : "Волшебная аптека",
          "description" : ""
        }
      },
      "title" : "Sign-Up via Email and/or Password request"
    },
    "SignUp via email and/or password response" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/User"
        },
        "dev" : {
          "$ref" : "#/definitions/Dev"
        }
      },
      "title" : "Sign-Up via Email and/or Password response"
    },
    "Meta38" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "number",
          "format" : "double",
          "example" : 200.0,
          "description" : ""
        }
      },
      "title" : "meta38"
    },
    "Dev" : {
      "type" : "object",
      "properties" : {
        "token_email" : {
          "$ref" : "#/definitions/DevTokenEmail"
        },
        "token_phone" : {
          "$ref" : "#/definitions/DevTokenPhone"
        }
      },
      "title" : "dev"
    },
    "VerifyEmailRequest" : {
      "type" : "object",
      "required" : [ "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "example" : "$2y$10$vWmVfDnPPOn4pC5MFEPiP.DkQRtFCqqq0k7V3v8qognX89AarWe",
          "description" : "Token for Email verification."
        }
      },
      "title" : "Verify Email request"
    },
    "VerifyEmailResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/User"
        }
      },
      "title" : "Verify Email response"
    },
    "VerifyPhoneRequest" : {
      "type" : "object",
      "required" : [ "phone", "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "example" : "774277",
          "description" : "token for verification phone number"
        },
        "phone" : {
          "type" : "string",
          "example" : "+380631112233",
          "description" : "Phone for verification"
        }
      },
      "title" : "Verify phone request"
    },
    "VerifyPhoneResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/User"
        }
      },
      "title" : "Verify phone response"
    },
    "ResendVerifyEmailTokenRequest" : {
      "type" : "object",
      "required" : [ "email" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "example" : "test@example.com",
          "description" : "email for resend verification code"
        }
      },
      "title" : "Resend verify email token request",
      "example" : {
        "email" : "test@example.com"
      }
    },
    "ResendVerifyEmailTokenResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "type" : "object",
          "description" : "",
          "properties" : { }
        },
        "dev" : {
          "$ref" : "#/definitions/DevTokenEmail"
        }
      },
      "title" : "Resend verify email token response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : { },
        "dev" : {
          "token" : "$2y$10$vWmVfDnPPOn4pC5MFEPiP.DkQRtFCqqq0k7V3v8qognX89AarWe",
          "expired" : 1491217485
        }
      }
    },
    "ResendVerifyPhoneTokenRequest" : {
      "type" : "object",
      "required" : [ "phone" ],
      "properties" : {
        "phone" : {
          "type" : "string",
          "example" : "+380631112233",
          "description" : "phone number for resend verification code"
        }
      },
      "title" : "Resend verify phone token request",
      "example" : {
        "phone" : "+380631112233"
      }
    },
    "ResendVerifyPhoneTokenResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "type" : "object",
          "description" : "",
          "properties" : { }
        },
        "dev" : {
          "$ref" : "#/definitions/DevTokenPhone"
        }
      },
      "title" : "Resend verify phone token response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : { },
        "dev" : {
          "token" : 774277,
          "expired" : 1491217485
        }
      }
    },
    "BaseResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/AccessToken"
        }
      },
      "title" : "Base response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : {
          "token" : {
            "token_type" : "bearer",
            "access_token" : "b04792ffd43765d0a7f26ffc802c51744190d5c5"
          }
        }
      }
    },
    "FacebookRequest" : {
      "type" : "object",
      "required" : [ "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "example" : "access_token",
          "description" : "Access token from Facebook API."
        }
      },
      "title" : "Facebook request",
      "example" : {
        "token" : "access_token"
      }
    },
    "FacebookResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/AccessToken"
        }
      },
      "title" : "Facebook response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : {
          "token" : {
            "token_type" : "bearer",
            "access_token" : "b04792ffd43765d0a7f26ffc802c51744190d5c5"
          }
        }
      }
    },
    "VkontakteRequest" : {
      "type" : "object",
      "required" : [ "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "example" : "access_token",
          "description" : "Access token from VK.com."
        }
      },
      "title" : "Vkontakte request",
      "example" : {
        "token" : "access_token"
      }
    },
    "VkontakteResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/AccessToken"
        }
      },
      "title" : "Vkontakte response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : {
          "token" : {
            "token_type" : "bearer",
            "access_token" : "b04792ffd43765d0a7f26ffc802c51744190d5c5"
          }
        }
      }
    },
    "Google+Request" : {
      "type" : "object",
      "required" : [ "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "example" : "access_token",
          "description" : "Access token from Google+."
        }
      },
      "title" : "Google+ request",
      "example" : {
        "token" : "access_token"
      }
    },
    "Google+Response" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/AccessToken"
        }
      },
      "title" : "Google+ response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : {
          "token" : {
            "token_type" : "bearer",
            "access_token" : "b04792ffd43765d0a7f26ffc802c51744190d5c5"
          }
        }
      }
    },
    "GetCurrentUserResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/User"
        }
      },
      "title" : "Get current User response"
    },
    "UpdateCurrentUserRequest" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string",
          "example" : "test@example.com",
          "description" : "New user email"
        },
        "phone" : {
          "type" : "string",
          "example" : "+3809876543321",
          "description" : "New user phone"
        },
        "password" : {
          "type" : "string",
          "example" : "p@ssword!",
          "description" : "New user password Validation:1 digit, 1 alpha, length 6-32"
        },
        "first_name" : {
          "type" : "string",
          "example" : "Ivan",
          "description" : "User name"
        },
        "last_name" : {
          "type" : "string",
          "example" : "Ivanot",
          "description" : "User last name"
        },
        "nickname" : {
          "type" : "string",
          "example" : "vane4ka",
          "description" : "User new nickname"
        },
        "image" : {
          "type" : "string",
          "example" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
          "description" : "User image. Can be url to image or base64 image data."
        },
        "locale" : {
          "$ref" : "#/definitions/Locale"
        },
        "email_send_frequency" : {
          "$ref" : "#/definitions/EmailSendFrequency"
        },
        "timezone" : {
          "type" : "string",
          "example" : "UTC",
          "description" : "User timezone, its need to sending account statements"
        },
        "active" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Checker if user and his pages active"
        }
      },
      "title" : "Update current User request"
    },
    "Locale" : {
      "type" : "string",
      "title" : "locale",
      "example" : "ru_RU",
      "enum" : [ "ru_RU", "en_EN" ]
    },
    "UpdateCurrentUserResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/User"
        }
      },
      "title" : "Update current User response"
    },
    "SendPasswordResetTokenRequest" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string",
          "example" : "test@example.com",
          "description" : "Required without phone"
        },
        "phone" : {
          "type" : "string",
          "example" : "+3809876543321",
          "description" : "Required without email"
        }
      },
      "title" : "Send password reset token request",
      "example" : {
        "email" : "test@example.com",
        "phone" : "+3809876543321"
      }
    },
    "SendPasswordResetTokenResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/Data"
        },
        "dev" : {
          "$ref" : "#/definitions/Dev"
        }
      },
      "title" : "Send password reset token response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : {
          "check_digit" : 7
        },
        "dev" : {
          "token_email" : {
            "token" : "$2y$10$vWmVfDnPPOn4pC5MFEPiP.DkQRtFCqqq0k7V3v8qognX89AarWe",
            "expired" : 1491217485
          },
          "token_phone" : {
            "token" : 774277,
            "expired" : 1491217485
          }
        }
      }
    },
    "Data" : {
      "type" : "object",
      "properties" : {
        "check_digit" : {
          "type" : "number",
          "format" : "double",
          "example" : 7.0,
          "description" : "Digit for verify phone token. Exists in case by phone registration"
        }
      },
      "title" : "data"
    },
    "ResetPasswordRequest" : {
      "type" : "object",
      "required" : [ "password" ],
      "properties" : {
        "password" : {
          "type" : "string",
          "example" : "qq1wwe",
          "description" : "New user password"
        },
        "token" : {
          "type" : "string",
          "example" : "b52b76ae284938365372fda587695d74",
          "description" : "User token from phone or email"
        }
      },
      "title" : "Reset password request"
    },
    "ResetPasswordResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/User"
        }
      },
      "title" : "Reset password response"
    },
    "LinkSocialProfileRequest" : {
      "type" : "object",
      "required" : [ "token", "type" ],
      "properties" : {
        "type" : {
          "$ref" : "#/definitions/Type"
        },
        "token" : {
          "type" : "string",
          "example" : "RfrjqNj{thjdsqNjrty",
          "description" : "Token from social profile"
        },
        "options" : {
          "$ref" : "#/definitions/Options"
        }
      },
      "title" : "Link Social Profile request"
    },
    "Options" : {
      "type" : "object",
      "properties" : {
        "redirect_uri" : {
          "type" : "string",
          "example" : "http://iam.me/redirect",
          "description" : ""
        }
      },
      "title" : "options"
    },
    "LinkSocialProfileResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/User"
        }
      },
      "title" : "Link Social Profile response"
    },
    "UnlinkSocialProfileResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/User"
        }
      },
      "title" : "Unlink Social Profile response"
    },
    "SendMessageToSupportRequest" : {
      "type" : "object",
      "required" : [ "email", "message", "name" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "example" : "test@example.com",
          "description" : "User email"
        },
        "name" : {
          "type" : "string",
          "example" : "Sam",
          "description" : "User name"
        },
        "message" : {
          "type" : "string",
          "example" : "Hi dudes",
          "description" : "Message from the user"
        }
      },
      "title" : "Send message to support request",
      "example" : {
        "email" : "test@example.com",
        "name" : "Sam",
        "message" : "Hi dudes"
      }
    },
    "SendMessageToSupportResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/Data113"
        }
      },
      "title" : "Send message to support response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : {
          "type" : "user_message",
          "id" : "44336186",
          "created_at\"" : "147308490",
          "body" : "Hi dudes",
          "message_type" : "inapp",
          "x_rate_limit" : "500",
          "x_rate_remaining" : "499",
          "x_rate_reset" : "1473084960"
        }
      }
    },
    "Data113" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "user_message",
          "description" : ""
        },
        "id" : {
          "type" : "string",
          "example" : "44336186",
          "description" : ""
        },
        "created_at\"" : {
          "type" : "string",
          "example" : "147308490",
          "description" : ""
        },
        "body" : {
          "type" : "string",
          "example" : "Hi dudes",
          "description" : ""
        },
        "message_type" : {
          "type" : "string",
          "example" : "inapp",
          "description" : ""
        },
        "x_rate_limit" : {
          "type" : "string",
          "example" : "500",
          "description" : ""
        },
        "x_rate_remaining" : {
          "type" : "string",
          "example" : "499",
          "description" : ""
        },
        "x_rate_reset" : {
          "type" : "string",
          "example" : "1473084960",
          "description" : ""
        }
      },
      "title" : "data113"
    },
    "GetCurrentUserPagesResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "$ref" : "#/definitions/PageFull"
          }
        },
        "paginate" : {
          "$ref" : "#/definitions/ResponsePagination"
        }
      },
      "title" : "Get current User Pages response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : [ {
          "id" : "58e2278b84092e68020041aa",
          "short_id" : "a",
          "title" : "Payment page",
          "description" : "Pay me please",
          "logo" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
          "amount" : 100,
          "payments_count" : 0,
          "is_active" : 1,
          "is_default" : 1,
          "updated_at" : "2017",
          "created_at" : "2017",
          "limits" : [ {
            "type" : "count_max",
            "value" : 5,
            "current" : 0,
            "is_exceeded" : false
          }, {
            "type" : "expires_at",
            "value" : 2017,
            "is_exceeded" : false
          } ],
          "card" : {
            "id" : "58e2278a84092e61700041a7",
            "number" : "2860"
          },
          "user" : {
            "nickname" : "ivan",
            "first_name" : "Ivan",
            "last_name" : "Ivanov",
            "image" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
            "is_anonymous" : false
          }
        } ],
        "paginate" : {
          "limit" : 20,
          "starting_after" : "56c31536a60ad644060041af",
          "ending_before" : "58e5f1dfa60ad6b5330041b3",
          "count" : 1000
        }
      }
    },
    "ListCurrentUserCardsResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "$ref" : "#/definitions/CardShort"
          }
        }
      },
      "title" : "List current User Cards response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : [ {
          "id" : "58e2278a84092e61700041a7",
          "number" : "5237********1358",
          "active" : true,
          "turnover" : 0
        } ]
      }
    },
    "AddANewCardForCurrentUserRequest" : {
      "type" : "object",
      "properties" : {
        "number" : {
          "type" : "string",
          "example" : "0000111122223333",
          "description" : "Card Number"
        },
        "active" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Is card enable or not"
        }
      },
      "title" : "Add a new Card for current User request",
      "example" : {
        "number" : "0000111122223333",
        "active" : true
      }
    },
    "AddANewCardForCurrentUserResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/CardShort"
        }
      },
      "title" : "Add a new Card for current User response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : {
          "id" : "58e2278a84092e61700041a7",
          "number" : "5237********1358",
          "active" : true,
          "turnover" : 0
        }
      }
    },
    "EditCardDataRequest" : {
      "type" : "object",
      "required" : [ "number" ],
      "properties" : {
        "number" : {
          "type" : "string",
          "example" : "0000111122223333",
          "description" : "Card number"
        },
        "active" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Is card enable or not"
        }
      },
      "title" : "Edit Card Data request",
      "example" : {
        "number" : "0000111122223333",
        "active" : true
      }
    },
    "EditCardDataResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/CardShort"
        }
      },
      "title" : "Edit Card Data response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : {
          "id" : "58e2278a84092e61700041a7",
          "number" : "5237********1358",
          "active" : true,
          "turnover" : 0
        }
      }
    },
    "DeleteCardResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "type" : "object",
          "description" : "",
          "properties" : { }
        }
      },
      "title" : "Delete Card response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : { }
      }
    },
    "ListPagesThatIsUsingCardResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "$ref" : "#/definitions/PageShort"
          }
        }
      },
      "title" : "List pages that is using Card response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : [ {
          "id" : "58e2278b84092e68020041aa",
          "short_id" : "a",
          "title" : "Payment page",
          "description" : "Pay me please",
          "logo" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
          "amount" : 100,
          "payments_count" : 0,
          "is_active" : 1,
          "is_default" : 1,
          "updated_at" : "2017",
          "created_at" : "2017",
          "limits" : [ {
            "type" : "count_max",
            "value" : 5,
            "current" : 0,
            "is_exceeded" : false
          }, {
            "type" : "expires_at",
            "value" : 2017,
            "is_exceeded" : false
          } ],
          "card_id" : "58e2278a84092e61700041a7"
        } ]
      }
    },
    "CreateUserPageRequest" : {
      "type" : "object",
      "required" : [ "card_id" ],
      "properties" : {
        "card_id" : {
          "type" : "string",
          "example" : "58e2278a84092e61700041a7",
          "description" : "User card ID, MongoID"
        },
        "amount" : {
          "type" : "number",
          "format" : "double",
          "example" : 1000.0,
          "description" : "Fixed payment amount for page"
        },
        "title" : {
          "type" : "string",
          "example" : "Death Star",
          "description" : "Page title"
        },
        "description" : {
          "type" : "string",
          "example" : "Crowdfunding Death Star",
          "description" : "Page description"
        },
        "is_active" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Will be page available for payments"
        },
        "is_default" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Set page as default"
        },
        "logo" : {
          "type" : "string",
          "example" : "http://gravatar.com/avatar/default",
          "description" : ""
        },
        "limits" : {
          "$ref" : "#/definitions/Limits133"
        }
      },
      "title" : "Create User Page request",
      "example" : {
        "card_id" : "58e2278a84092e61700041a7",
        "amount" : 1000,
        "title" : "Death Star",
        "description" : "Crowdfunding Death Star",
        "is_active" : true,
        "is_default" : true,
        "logo" : "http://gravatar.com/avatar/default",
        "limits" : {
          "count_max" : 100,
          "expires_at" : "2016-08-25T13:20:50+00:00"
        }
      }
    },
    "Limits133" : {
      "type" : "object",
      "properties" : {
        "count_max" : {
          "type" : "number",
          "format" : "double",
          "example" : 100.0,
          "description" : "maximum amount of payments for page."
        },
        "expires_at" : {
          "type" : "string",
          "example" : "8/25/2016 1:20:50 PM",
          "description" : "expiration date for page, ISO Date"
        }
      },
      "title" : "limits133"
    },
    "CreateUserPageResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/PageFull"
        }
      },
      "title" : "Create User Page response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : {
          "id" : "58e2278b84092e68020041aa",
          "short_id" : "a",
          "title" : "Payment page",
          "description" : "Pay me please",
          "logo" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
          "amount" : 100,
          "payments_count" : 0,
          "is_active" : 1,
          "is_default" : 1,
          "updated_at" : "2017",
          "created_at" : "2017",
          "limits" : [ {
            "type" : "count_max",
            "value" : 5,
            "current" : 0,
            "is_exceeded" : false
          }, {
            "type" : "expires_at",
            "value" : 2017,
            "is_exceeded" : false
          } ],
          "card" : {
            "id" : "58e2278a84092e61700041a7",
            "number" : "2860"
          },
          "user" : {
            "nickname" : "ivan",
            "first_name" : "Ivan",
            "last_name" : "Ivanov",
            "image" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
            "is_anonymous" : false
          }
        }
      }
    },
    "CreateAnonymousPageRequest" : {
      "type" : "object",
      "required" : [ "card_number" ],
      "properties" : {
        "card_number" : {
          "type" : "string",
          "example" : "4242000011112222",
          "description" : "Credit card number. Creates and adds card to page"
        },
        "amount" : {
          "type" : "number",
          "format" : "double",
          "example" : 1000.0,
          "description" : "Fixed payment amount for page"
        },
        "title" : {
          "type" : "string",
          "example" : "Death Star",
          "description" : "Page title"
        },
        "description" : {
          "type" : "string",
          "example" : "Crowdfunding Death Star",
          "description" : "Page description"
        },
        "logo" : {
          "type" : "string",
          "example" : "http://gravatar.com/avatar/default",
          "description" : ""
        },
        "limits" : {
          "$ref" : "#/definitions/Limits133"
        }
      },
      "title" : "Create Anonymous Page request",
      "example" : {
        "card_number" : "4242000011112222",
        "amount" : 1000,
        "title" : "Death Star",
        "description" : "Crowdfunding Death Star",
        "logo" : "http://gravatar.com/avatar/default",
        "limits" : {
          "count_max" : 100,
          "expires_at" : "2016-08-25T13:20:50+00:00"
        }
      }
    },
    "CreateAnonymousPageResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/PageFull"
        }
      },
      "title" : "Create Anonymous Page response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : {
          "id" : "58e2278b84092e68020041aa",
          "short_id" : "a",
          "title" : "Payment page",
          "description" : "Pay me please",
          "logo" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
          "amount" : 100,
          "payments_count" : 0,
          "is_active" : 1,
          "is_default" : 1,
          "updated_at" : "2017",
          "created_at" : "2017",
          "limits" : [ {
            "type" : "count_max",
            "value" : 5,
            "current" : 0,
            "is_exceeded" : false
          }, {
            "type" : "expires_at",
            "value" : 2017,
            "is_exceeded" : false
          } ],
          "card" : {
            "id" : "58e2278a84092e61700041a7",
            "number" : "2860"
          },
          "user" : {
            "nickname" : "ivan",
            "first_name" : "Ivan",
            "last_name" : "Ivanov",
            "image" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
            "is_anonymous" : false
          }
        }
      }
    },
    "CreateDtekPageRequest" : {
      "type" : "object",
      "required" : [ "res_id: DTEK_001", "sender" ],
      "properties" : {
        "sender" : {
          "$ref" : "#/definitions/DtekSender"
        },
        "res_id: DTEK_001" : {
          "type" : "string",
          "description" : "each RES will have it's own merchant_id."
        },
        "amount" : {
          "type" : "number",
          "format" : "double",
          "example" : 1000.0,
          "description" : "Fixed payment amount for page. Can be edited by client"
        },
        "title" : {
          "type" : "string",
          "example" : "Оплата за електроенергію, жовтень 2017",
          "description" : "Page title"
        },
        "description" : {
          "type" : "string",
          "example" : "Crowdfunding Death Star",
          "description" : "Page description. Payment purpose can be passed here."
        },
        "logo" : {
          "type" : "string",
          "example" : "http://gravatar.com/avatar/default",
          "description" : ""
        },
        "limits" : {
          "$ref" : "#/definitions/Limits133"
        }
      },
      "title" : "Create DTEK Page request",
      "example" : {
        "sender" : {
          "account_number" : "30043223443",
          "name" : "Іванов Іван Іванович",
          "email" : "ivanov@mail.com",
          "phone" : "+380971111111",
          "address" : {
            "area" : "Житомирська",
            "region" : "Бердичівський",
            "settlement" : "Київ",
            "settlement_type" : "CITY",
            "street_type" : "STREET",
            "street" : "Ніжинська",
            "building" : "15",
            "apartment" : "23",
            "zip" : 2090.0
          }
        },
        "res_id: DTEK_001" : "",
        "amount" : 1000,
        "title" : "Оплата за електроенергію, жовтень 2017",
        "description" : "Crowdfunding Death Star",
        "logo" : "http://gravatar.com/avatar/default",
        "limits" : {
          "count_max" : 100,
          "expires_at" : "2016-08-25T13:20:50+00:00"
        }
      }
    },
    "CreateDtekPageResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/PageFullDtek"
        }
      },
      "title" : "Create DTEK Page response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : {
          "id" : "58e2278b84092e68020041aa",
          "short_id" : "a",
          "title" : "Payment page",
          "description" : "Pay me please",
          "logo" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
          "amount" : 100,
          "payments_count" : 0,
          "is_active" : 1,
          "is_default" : 1,
          "updated_at" : "2017",
          "created_at" : "2017",
          "limits" : [ {
            "type" : "count_max",
            "value" : 5,
            "current" : 0,
            "is_exceeded" : false
          }, {
            "type" : "expires_at",
            "value" : 2017,
            "is_exceeded" : false
          } ],
          "account_number" : "30043223443",
          "res_id: DTEK_001" : "",
          "sender_name" : "Іванов Іван Іванович",
          "sender_email" : "ivanov@mail.com",
          "sender_phone" : "+380971111111"
        }
      }
    },
    "GetAllPagesResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "$ref" : "#/definitions/PageFull"
          }
        },
        "paginate" : {
          "$ref" : "#/definitions/ResponsePagination"
        }
      },
      "title" : "Get all Pages response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : [ {
          "id" : "58e2278b84092e68020041aa",
          "short_id" : "a",
          "title" : "Payment page",
          "description" : "Pay me please",
          "logo" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
          "amount" : 100,
          "payments_count" : 0,
          "is_active" : 1,
          "is_default" : 1,
          "updated_at" : "2017",
          "created_at" : "2017",
          "limits" : [ {
            "type" : "count_max",
            "value" : 5,
            "current" : 0,
            "is_exceeded" : false
          }, {
            "type" : "expires_at",
            "value" : 2017,
            "is_exceeded" : false
          } ],
          "card" : {
            "id" : "58e2278a84092e61700041a7",
            "number" : "2860"
          },
          "user" : {
            "nickname" : "ivan",
            "first_name" : "Ivan",
            "last_name" : "Ivanov",
            "image" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
            "is_anonymous" : false
          }
        } ],
        "paginate" : {
          "limit" : 20,
          "starting_after" : "56c31536a60ad644060041af",
          "ending_before" : "58e5f1dfa60ad6b5330041b3",
          "count" : 1000
        }
      }
    },
    "GetCurrentUserPageResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/PageFull"
        }
      },
      "title" : "Get current User Page response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : {
          "id" : "58e2278b84092e68020041aa",
          "short_id" : "a",
          "title" : "Payment page",
          "description" : "Pay me please",
          "logo" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
          "amount" : 100,
          "payments_count" : 0,
          "is_active" : 1,
          "is_default" : 1,
          "updated_at" : "2017",
          "created_at" : "2017",
          "limits" : [ {
            "type" : "count_max",
            "value" : 5,
            "current" : 0,
            "is_exceeded" : false
          }, {
            "type" : "expires_at",
            "value" : 2017,
            "is_exceeded" : false
          } ],
          "card" : {
            "id" : "58e2278a84092e61700041a7",
            "number" : "2860"
          },
          "user" : {
            "nickname" : "ivan",
            "first_name" : "Ivan",
            "last_name" : "Ivanov",
            "image" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
            "is_anonymous" : false
          }
        }
      }
    },
    "GetDefaultPageForUserResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/PageFull"
        }
      },
      "title" : "Get default Page for User response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : {
          "id" : "58e2278b84092e68020041aa",
          "short_id" : "a",
          "title" : "Payment page",
          "description" : "Pay me please",
          "logo" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
          "amount" : 100,
          "payments_count" : 0,
          "is_active" : 1,
          "is_default" : 1,
          "updated_at" : "2017",
          "created_at" : "2017",
          "limits" : [ {
            "type" : "count_max",
            "value" : 5,
            "current" : 0,
            "is_exceeded" : false
          }, {
            "type" : "expires_at",
            "value" : 2017,
            "is_exceeded" : false
          } ],
          "card" : {
            "id" : "58e2278a84092e61700041a7",
            "number" : "2860"
          },
          "user" : {
            "nickname" : "ivan",
            "first_name" : "Ivan",
            "last_name" : "Ivanov",
            "image" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
            "is_anonymous" : false
          }
        }
      }
    },
    "EditCurrentUserPageRequest" : {
      "type" : "object",
      "properties" : {
        "card_id" : {
          "type" : "string",
          "example" : "58e2278a84092e61700041a7",
          "description" : "User card ID, MongoID"
        },
        "card_number" : {
          "type" : "string",
          "example" : "4242000011112222",
          "description" : "User credit card number. Creates and adds card to page"
        },
        "amount" : {
          "type" : "number",
          "format" : "double",
          "example" : 1000.0,
          "description" : "Fixed payment amount for page"
        },
        "title" : {
          "type" : "string",
          "example" : "Death Star",
          "description" : "Page title"
        },
        "description" : {
          "type" : "string",
          "example" : "Crowdfunding Death Star",
          "description" : "Page description"
        },
        "is_active" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Will be page available for payments"
        },
        "is_default" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Set page as default"
        },
        "logo" : {
          "type" : "string",
          "example" : "http://gravatar.com/avatar/default",
          "description" : ""
        },
        "limits" : {
          "$ref" : "#/definitions/Limits133"
        }
      },
      "title" : "Edit current User Page request",
      "example" : {
        "card_id" : "58e2278a84092e61700041a7",
        "card_number" : "4242000011112222",
        "amount" : 1000,
        "title" : "Death Star",
        "description" : "Crowdfunding Death Star",
        "is_active" : true,
        "is_default" : true,
        "logo" : "http://gravatar.com/avatar/default",
        "limits" : {
          "count_max" : 100,
          "expires_at" : "2016-08-25T13:20:50+00:00"
        }
      }
    },
    "EditCurrentUserPageResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/PageFull"
        }
      },
      "title" : "Edit current User Page response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : {
          "id" : "58e2278b84092e68020041aa",
          "short_id" : "a",
          "title" : "Payment page",
          "description" : "Pay me please",
          "logo" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
          "amount" : 100,
          "payments_count" : 0,
          "is_active" : 1,
          "is_default" : 1,
          "updated_at" : "2017",
          "created_at" : "2017",
          "limits" : [ {
            "type" : "count_max",
            "value" : 5,
            "current" : 0,
            "is_exceeded" : false
          }, {
            "type" : "expires_at",
            "value" : 2017,
            "is_exceeded" : false
          } ],
          "card" : {
            "id" : "58e2278a84092e61700041a7",
            "number" : "2860"
          },
          "user" : {
            "nickname" : "ivan",
            "first_name" : "Ivan",
            "last_name" : "Ivanov",
            "image" : "http://www.gravatar.com/avatar/982ded8261049c17fb5f11d8ae0d6d38",
            "is_anonymous" : false
          }
        }
      }
    },
    "DeleteCurrentUserPageResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "type" : "object",
          "description" : "",
          "properties" : { }
        }
      },
      "title" : "Delete current User Page response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : { }
      }
    },
    "SendInvoiceResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "type" : "object",
          "description" : "",
          "properties" : { }
        }
      },
      "title" : "Send Invoice response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : { }
      }
    },
    "GetUsersCountResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/Data166"
        }
      },
      "title" : "Get Users count response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : {
          "count" : 100500
        }
      }
    },
    "Data166" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "number",
          "format" : "double",
          "example" : 100500.0,
          "description" : ""
        }
      },
      "title" : "data166"
    },
    "GetCurrentUserWebhooksResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "$ref" : "#/definitions/Webhook"
          }
        }
      },
      "title" : "Get current User Webhooks response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : [ {
          "id" : "58e22e0b84092e62700041a9",
          "url" : "http://example.com"
        } ]
      }
    },
    "CreateNewWebhookRequest" : {
      "type" : "object",
      "required" : [ "url" ],
      "properties" : {
        "url" : {
          "type" : "string",
          "example" : "http:://example.com/mbill_webhook",
          "description" : "Webhook url"
        }
      },
      "title" : "Create new Webhook request",
      "example" : {
        "url" : "http:://example.com/mbill_webhook"
      }
    },
    "CreateNewWebhookResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/Webhook"
        }
      },
      "title" : "Create new Webhook response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : {
          "id" : "58e22e0b84092e62700041a9",
          "url" : "http://example.com"
        }
      }
    },
    "ModifyWebhookRequest" : {
      "type" : "object",
      "required" : [ "url" ],
      "properties" : {
        "url" : {
          "type" : "string",
          "example" : "http:://example.com/mbill_webhook",
          "description" : "Webhook url"
        }
      },
      "title" : "Modify Webhook request",
      "example" : {
        "url" : "http:://example.com/mbill_webhook"
      }
    },
    "ModifyWebhookResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/Webhook"
        }
      },
      "title" : "Modify Webhook response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : {
          "id" : "58e22e0b84092e62700041a9",
          "url" : "http://example.com"
        }
      }
    },
    "DeleteWebhookResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "type" : "object",
          "description" : "",
          "properties" : { }
        }
      },
      "title" : "Delete Webhook response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : { }
      }
    },
    "CreateRequest" : {
      "type" : "object",
      "required" : [ "sender" ],
      "properties" : {
        "sender" : {
          "$ref" : "#/definitions/Sender182"
        },
        "amount" : {
          "type" : "number",
          "format" : "double",
          "example" : 199.99,
          "description" : "**Required if is not specified by the owner of the page** Payment amount. Format: `d+.dd`"
        },
        "description" : {
          "type" : "string",
          "example" : "Death Star investments",
          "description" : "Payment description. Used when description is not specified by the owner of the page"
        },
        "external_id" : {
          "type" : "string",
          "example" : "66ea3306180",
          "description" : "Client external id. Will be used in webhooks"
        }
      },
      "title" : "Create request",
      "example" : {
        "sender" : {
          "credential" : {
            "token" : ""
          },
          "email" : "ivan@example.com"
        },
        "amount" : 199.99,
        "description" : "Death Star investments",
        "external_id" : "66ea3306180"
      }
    },
    "Sender182" : {
      "type" : "object",
      "required" : [ "credential" ],
      "properties" : {
        "credential" : {
          "$ref" : "#/definitions/Credential"
        },
        "email" : {
          "type" : "string",
          "example" : "ivan@example.com",
          "description" : "sender email for payment status notification"
        }
      },
      "title" : "sender182"
    },
    "Credential" : {
      "type" : "object",
      "required" : [ "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "description" : "Sender Card token"
        }
      },
      "title" : "credential"
    },
    "CreateResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/PaymentPay3dSecure"
        }
      },
      "title" : "Create response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : {
          "id" : "58e4edf0a60ad664340041a8",
          "external_id" : "3f5cb2ad",
          "amount" : 100.5,
          "fee" : 5.5,
          "status" : "processed",
          "decline_reason" : "",
          "updated_at" : "2017-04-05T13:15:30+00:00",
          "created_at" : "2017-04-05T13:15:28+00:00",
          "sender" : {
            "card_number" : "559158******53",
            "email" : "lemelanov@example.net"
          },
          "recipient" : {
            "card_number" : "557661******05",
            "card_id" : "58e4edeea60ad6b5330041b0",
            "email" : "elenberg@example.net",
            "name" : "Zlatan"
          },
          "meta" : {
            "some_client_key" : "some_client_data"
          },
          "transaction_id" : "14348",
          "transaction_token" : "transfer-token-3f5cb2ad-298a-4e4d-a74a-fd6d594a4971",
          "token" : "transfer-token-84d512f3-1b45-4de0-bc2a-da3bca526990",
          "token_expires_at" : "2017-04-05T12:28:49.789572Z",
          "auth" : {
            "md" : "1491612487",
            "acs_url" : "http://p2y-dev.mbill.co/pay2you-external/3ds",
            "pa_req" : "somethingPaReq",
            "terminal_url" : "http://p2y-dev.mbill.co/pay2you-external/3ds/input3d",
            "type" : "3d-secure"
          }
        }
      }
    },
    "CompleteRequest" : {
      "type" : "object",
      "required" : [ "code", "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "example" : "transfer-token-84d512f3-1b45-4de0-bc2a-da3bca526990",
          "description" : "Payment token from Tokenizer"
        },
        "code" : {
          "type" : "string",
          "example" : "123345",
          "description" : "Lookup code"
        }
      },
      "title" : "Complete request",
      "example" : {
        "token" : "transfer-token-84d512f3-1b45-4de0-bc2a-da3bca526990",
        "code" : "123345"
      }
    },
    "CompleteResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/PaymentComplete"
        }
      },
      "title" : "Complete response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : {
          "id" : "58e4edf0a60ad664340041a8",
          "external_id" : "3f5cb2ad",
          "amount" : 100.5,
          "fee" : 5.5,
          "status" : "processed",
          "decline_reason" : "",
          "updated_at" : "2017-04-05T13:15:30+00:00",
          "created_at" : "2017-04-05T13:15:28+00:00",
          "sender" : {
            "card_number" : "559158******53",
            "email" : "lemelanov@example.net"
          },
          "recipient" : {
            "card_number" : "557661******05",
            "card_id" : "58e4edeea60ad6b5330041b0",
            "email" : "elenberg@example.net",
            "name" : "Zlatan"
          },
          "meta" : {
            "some_client_key" : "some_client_data"
          },
          "transaction_id" : "14348",
          "transaction_token" : "transfer-token-3f5cb2ad-298a-4e4d-a74a-fd6d594a4971"
        }
      }
    },
    "GetPaymentResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "$ref" : "#/definitions/PaymentStatus"
        }
      },
      "title" : "Get Payment response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : {
          "id" : "58e4edf0a60ad664340041a8",
          "external_id" : "3f5cb2ad",
          "amount" : 100.5,
          "fee" : 5.5,
          "status" : "processed",
          "decline_reason" : "",
          "updated_at" : "2017-04-05T13:15:30+00:00",
          "created_at" : "2017-04-05T13:15:28+00:00",
          "sender" : {
            "card_number" : "559158******53",
            "email" : "lemelanov@example.net"
          },
          "recipient" : {
            "card_number" : "557661******05",
            "card_id" : "58e4edeea60ad6b5330041b0",
            "email" : "elenberg@example.net",
            "name" : "Zlatan"
          },
          "meta" : {
            "some_client_key" : "some_client_data"
          },
          "page" : {
            "id" : "58e4edeea60ad6b5330041b1",
            "title" : "Page title",
            "description" : "Description of payment"
          },
          "transaction_id" : "14348",
          "transaction_token" : "transfer-token-3f5cb2ad-298a-4e4d-a74a-fd6d594a4971"
        }
      }
    },
    "ResendReceiptResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        }
      },
      "title" : "Resend Receipt response",
      "example" : {
        "meta" : {
          "code" : 200
        }
      }
    },
    "Type193" : {
      "type" : "string",
      "title" : "type193",
      "example" : "json",
      "enum" : [ "json", "csv", "xlsx" ]
    },
    "ListOrSearchPaymentsResponse" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/Meta38"
        },
        "data" : {
          "type" : "array",
          "description" : "",
          "items" : {
            "$ref" : "#/definitions/PaymentHistory"
          }
        },
        "paginate" : {
          "$ref" : "#/definitions/ResponsePagination"
        }
      },
      "title" : "List or Search Payments response",
      "example" : {
        "meta" : {
          "code" : 200
        },
        "data" : [ {
          "id" : "58e4edf0a60ad664340041a8",
          "external_id" : "3f5cb2ad",
          "amount" : 100.5,
          "fee" : 5.5,
          "status" : "processed",
          "decline_reason" : "",
          "updated_at" : "2017-04-05T13:15:30+00:00",
          "created_at" : "2017-04-05T13:15:28+00:00",
          "sender" : {
            "card_number" : "559158******53",
            "email" : "lemelanov@example.net"
          },
          "recipient" : {
            "card_number" : "557661******05",
            "card_id" : "58e4edeea60ad6b5330041b0",
            "email" : "elenberg@example.net",
            "name" : "Zlatan"
          },
          "meta" : {
            "some_client_key" : "some_client_data"
          },
          "page" : {
            "id" : "58e4edeea60ad6b5330041b1",
            "title" : "Page title",
            "description" : "Description of payment"
          },
          "transaction_id" : "14348"
        } ],
        "paginate" : {
          "limit" : 20,
          "starting_after" : "56c31536a60ad644060041af",
          "ending_before" : "58e5f1dfa60ad6b5330041b3",
          "count" : 1000
        }
      }
    }
  }
}